(function() {var type_impls = {
"jumpy":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.72.0\">1.72.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1230\">source</a></span><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1242\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">&quot;foo&quot;</span>);\n<span class=\"kw\">let </span>as_str = &lt;<span class=\"kw-2\">&amp;</span>str&gt;::try_from(os_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(as_str, <span class=\"string\">&quot;foo&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Utf8Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Utf8Error\">Utf8Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<&'a OsStr>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#635\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#637\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsString>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1282\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1284\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsStr>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1274\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1276\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3COsString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#651\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#653\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsString.html\" title=\"struct std::ffi::os_str::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<OsString>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSocketAddrs-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/net/socket_addr.rs.html#280\">source</a></span><a href=\"#impl-ToSocketAddrs-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/net/socket_addr/trait.ToSocketAddrs.html\" title=\"trait std::net::socket_addr::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/std/net/socket_addr/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.IntoIter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class='docblock'>Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_socket_addrs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/net/socket_addr.rs.html#282\">source</a><a href=\"#method.to_socket_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.IntoIter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/futures/io/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::futures::io::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Converts this object to an iterator of resolved <a href=\"https://doc.rust-lang.org/1.75.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"https://doc.rust-lang.org/1.75.0/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details>","ToSocketAddrs","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1317\">source</a></span><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1319\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1453\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ffi/os_str.rs.html#1455\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<OsStr>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPath%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/path.rs.html#3163\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/path.rs.html#3165\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Path>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsciiExt-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#207\">source</a></span><a href=\"#impl-AsciiExt-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Container type for copied ASCII characters.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.is_ascii\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Checks if the value is within the ASCII range. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.is_ascii\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_uppercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_uppercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Makes a copy of the value in its ASCII upper case equivalent. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lowercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.to_ascii_lowercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Makes a copy of the value in its ASCII lower case equivalent. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_lowercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.eq_ignore_ascii_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, o: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Checks that two values are an ASCII case-insensitive match. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.eq_ignore_ascii_case\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_uppercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_uppercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Converts this type to its ASCII upper case equivalent in-place. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_lowercase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/std/ascii.rs.html#210\">source</a><a href=\"#method.make_ascii_lowercase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><div class='docblock'>Converts this type to its ASCII lower case equivalent in-place. <a href=\"https://doc.rust-lang.org/1.75.0/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\">Read more</a></div></details></div></details>","AsciiExt","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-StructuralEq-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/marker.rs.html#283-295\">source</a><a href=\"#impl-StructuralEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","StructuralEq","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-Eq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#35\">source</a></span><a href=\"#impl-Eq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","Eq","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2635\">source</a></span><a href=\"#impl-Error-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>The lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#19\">source</a></span><a href=\"#impl-Ord-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements ordering of strings.</p>\n<p>Strings are ordered  <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a> by their byte values. This orders Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Sorting strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#21\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details>","Ord","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/mod.rs.html#844\">source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/mod.rs.html#846\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<str>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#27\">source</a></span><a href=\"#impl-PartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#29\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pattern%3C'a%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#940\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Non-allocating substring search.</p>\n<p>Will handle the pattern <code>&quot;&quot;</code> as returning empty matches at each character\nboundary.</p>\n<h4 id=\"examples\"><a href=\"#examples\">Examples</a></h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Hello world&quot;</span>.find(<span class=\"string\">&quot;world&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#950\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the front of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#956\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches anywhere in the haystack</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#982\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the front of haystack, if it matches.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#993\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks whether the pattern matches at the back of the haystack.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#999\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span></summary><div class=\"docblock\"><p>Removes the pattern from the back of haystack, if it matches.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/struct.StrSearcher.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span><div class='docblock'>Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/pattern.rs.html#944\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/struct.StrSearcher.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>)</span></div></span><div class='docblock'>Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details></div></details>","Pattern<'a>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#864\">source</a></span><a href=\"#impl-Hash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#866\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details>","Hash","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/mod.rs.html#836\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/convert/mod.rs.html#838\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2553\">source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2555\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-StructuralPartialEq-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","StructuralPartialEq","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/mod.rs.html#2363\">source</a></span><a href=\"#impl-Display-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/mod.rs.html#2364\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#53-55\">source</a></span><a href=\"#impl-Index%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#60\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/mod.rs.html#2338\">source</a></span><a href=\"#impl-Debug-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/fmt/mod.rs.html#2339\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#45\">source</a></span><a href=\"#impl-PartialOrd-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implements comparison operations on strings.</p>\n<p>Strings are compared <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a> by their byte values. This compares Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Comparing strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#47\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#465\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..= end]</code> or <code>&amp;mut self[begin ..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>]. Equivalent to <code>&amp;self [begin .. end + 1]</code> or <code>&amp;mut self[begin .. end + 1]</code>, except if <code>end</code> has the maximum value for\n<code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>end</code> does not point\nto the ending byte offset of a character (<code>end + 1</code> is either a starting\nbyte offset or equal to <code>len</code>), if <code>begin &gt; end</code>, or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#468\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#472\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#476\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#481\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#486\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#493\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#324\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeTo%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[.. end]</code> or <code>&amp;mut self[.. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>).\nEquivalent to <code>&amp;self[0 .. end]</code> or <code>&amp;mut self[0 .. end]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>end</code> does not point to the starting byte offset of a\ncharacter (as defined by <code>is_char_boundary</code>), or if <code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#327\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#337\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#347\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#352\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#357\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#365\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#269\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing for arbitrary bounds.</p>\n<p>Returns a slice of the given string bounded by the byte indices\nprovided by each bound.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>begin</code> or <code>end</code> (if it exists and once adjusted for\ninclusion/exclusion) does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#273\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#278\">source</a><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#283\">source</a><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#290\">source</a><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#297\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#302\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#517\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeToInclusive%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..= end]</code> or <code>&amp;mut self[..= end]</code>.</p>\n<p>Returns a slice of the given string from the byte range [0, <code>end</code>].\nEquivalent to <code>&amp;self [0 .. end + 1]</code>, except if <code>end</code> has the maximum\nvalue for <code>usize</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>end</code> does not point to the ending byte offset of a character\n(<code>end + 1</code> is either a starting byte offset as defined by\n<code>is_char_boundary</code>, or equal to <code>len</code>), or if <code>end &gt;= len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#520\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#524\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#528\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#533\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#538\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#542\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#97\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a></h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[..]</code> or <code>&amp;mut self[..]</code>.</p>\n<p>Returns a slice of the whole string, i.e., returns <code>&amp;self</code> or <code>&amp;mut self</code>. Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>. Unlike\nother indexing operations, this can never panic.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<p>Equivalent to <code>&amp;self[0 .. len]</code> or <code>&amp;mut self[0 .. len]</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#100\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#104\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#108\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#112\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#116\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#120\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a> as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#393\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-RangeFrom%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin ..]</code> or <code>&amp;mut self[begin ..]</code>.</p>\n<p>Returns a slice of the given string from the byte range [<code>begin</code>, <code>len</code>).\nEquivalent to <code>&amp;self[begin .. len]</code> or <code>&amp;mut self[begin .. len]</code>.</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>begin</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), or if <code>begin &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#396\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#406\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#416\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#422\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#428\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#436\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0, const unstable\">1.20.0 (const: unstable)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#162\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-Range%3Cusize%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing with syntax <code>&amp;self[begin .. end]</code> or <code>&amp;mut self[begin .. end]</code>.</p>\n<p>Returns a slice of the given string from the byte range\n[<code>begin</code>, <code>end</code>).</p>\n<p>This operation is <em>O</em>(1).</p>\n<p>Prior to 1.20.0, these indexing operations were still supported by\ndirect implementation of <code>Index</code> and <code>IndexMut</code>.</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>Panics if <code>begin</code> or <code>end</code> does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n<h4 id=\"examples\"><a href=\"#examples\">Examples</a></h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">0 </span>.. <span class=\"number\">1</span>], <span class=\"string\">&quot;L&quot;</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[<span class=\"number\">1 </span>.. <span class=\"number\">9</span>], <span class=\"string\">&quot;öwe 老&quot;</span>);\n\n<span class=\"comment\">// these will panic:\n// byte 2 lies within `ö`:\n// &amp;s[2 ..3];\n\n// byte 8 lies within `老`\n// &amp;s[1 .. 8];\n\n// byte 100 is outside the string\n// &amp;s[3 .. 100];</span></code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#165\">source</a></span><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#179\">source</a></span><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#192\">source</a></span><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#215\">source</a></span><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting reference is not used.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#231\">source</a></span><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: unstable</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#239\">source</a></span><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class='docblock'>Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details>","SliceIndex<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26mut+str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2570\">source</a></span><a href=\"#impl-Default-for-%26mut+str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2573\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty mutable str</p>\n</div></details></div></details>","Default","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2561\">source</a></span><a href=\"#impl-Default-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2564\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty str</p>\n</div></details></div></details>","Default","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-ConstParamTy-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/marker.rs.html#1028-1039\">source</a><a href=\"#impl-ConstParamTy-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.ConstParamTy.html\" title=\"trait core::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","ConstParamTy","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#66-68\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/traits.rs.html#71\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Join%3C%26str%3E-for-%5BS%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#71\">source</a><a href=\"#impl-Join%3C%26str%3E-for-%5BS%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Join.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::Join\">Join</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[S]</a><span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Join.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>)</span></div></span><div class='docblock'>The resulting type after concatenation</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#74\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Join.html#tymethod.join\" class=\"fn\">join</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[S]</a>, sep: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>)</span></div></span><div class='docblock'>Implementation of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html#method.join\" title=\"method slice::join\"><code>[T]::join</code></a></div></details></div></details>","Join<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/borrow.rs.html#440\">source</a></span><a href=\"#impl-Add%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/borrow.rs.html#444\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; &lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2409\">source</a></span><a href=\"#impl-Add%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"docblock\"><p>Implements the <code>+</code> operator for concatenating two strings.</p>\n<p>This consumes the <code>String</code> on the left-hand side and re-uses its buffer (growing it if\nnecessary). This is done to avoid allocating a new <code>String</code> and copying the entire contents on\nevery operation, which would lead to <em>O</em>(<em>n</em>^2) running time when building an <em>n</em>-byte string by\nrepeated concatenation.</p>\n<p>The string on the right-hand side is only borrowed; its contents are copied into the returned\n<code>String</code>.</p>\n<h4 id=\"examples\"><a href=\"#examples\">Examples</a></h4>\n<p>Concatenating two <code>String</code>s takes the first by value and borrows the second:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">&quot;hello&quot;</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">&quot; world&quot;</span>);\n<span class=\"kw\">let </span>c = a + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is moved and can no longer be used here.</span></code></pre></div>\n<p>If you want to keep using the first <code>String</code>, you can clone it and append to the clone instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">&quot;hello&quot;</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">&quot; world&quot;</span>);\n<span class=\"kw\">let </span>c = a.clone() + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is still valid here.</span></code></pre></div>\n<p>Concatenating <code>&amp;str</code> slices can be done by converting the first to a <code>String</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"string\">&quot;hello&quot;</span>;\n<span class=\"kw\">let </span>b = <span class=\"string\">&quot; world&quot;</span>;\n<span class=\"kw\">let </span>c = a.to_string() + b;</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2413\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#143\">source</a><a href=\"#impl-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#164\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of <code>self</code>.</p>\n<p>This length is in bytes, not <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s or graphemes. In other words,\nit might not be what a human considers the length of the string.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>len = <span class=\"string\">&quot;foo&quot;</span>.len();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, len);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;ƒoo&quot;</span>.len(), <span class=\"number\">4</span>); <span class=\"comment\">// fancy f!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;ƒoo&quot;</span>.chars().count(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#183\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has a length of zero bytes.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;&quot;</span>;\n<span class=\"macro\">assert!</span>(s.is_empty());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;not empty&quot;</span>;\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_char_boundary\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#213\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.is_char_boundary\" class=\"fn\">is_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that <code>index</code>-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.</p>\n<p>The start and end of the string (when <code>index == self.len()</code>) are\nconsidered to be boundaries.</p>\n<p>Returns <code>false</code> if <code>index</code> is greater than <code>self.len()</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n<span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">0</span>));\n<span class=\"comment\">// start of `老`\n</span><span class=\"macro\">assert!</span>(s.is_char_boundary(<span class=\"number\">6</span>));\n<span class=\"macro\">assert!</span>(s.is_char_boundary(s.len()));\n\n<span class=\"comment\">// second byte of `ö`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">2</span>));\n\n<span class=\"comment\">// third byte of `老`\n</span><span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">8</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#260\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.floor_char_boundary\" class=\"fn\">floor_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not exceeding <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>This method can help you truncate a string so that it’s still valid UTF-8, but doesn’t\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren’t\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">&quot;❤️🧡💛💚💙💜&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.floor_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">&quot;❤️🧡&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceil_char_boundary\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#298\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.ceil_char_boundary\" class=\"fn\">ceil_char_boundary</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>round_char_boundary</code>)</span></div></span></summary><div class=\"docblock\"><p>Finds the closest <code>x</code> not below <code>index</code> where <code>is_char_boundary(x)</code> is <code>true</code>.</p>\n<p>If <code>index</code> is greater than the length of the string, this returns the length of the string.</p>\n<p>This method is the natural complement to <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.floor_char_boundary\" title=\"method str::floor_char_boundary\"><code>floor_char_boundary</code></a>. See that method\nfor more details.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(round_char_boundary)]\n</span><span class=\"kw\">let </span>s = <span class=\"string\">&quot;❤️🧡💛💚💙💜&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">26</span>);\n<span class=\"macro\">assert!</span>(!s.is_char_boundary(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>closest = s.ceil_char_boundary(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(closest, <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>s[..closest], <span class=\"string\">&quot;❤️🧡💛&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#324\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/fn.from_utf8.html\" title=\"fn jumpy::prelude::bones_utils::prelude::alloc::str::from_utf8\"><code>from_utf8</code></a> function.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"string\">&quot;bors&quot;</span>.as_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b&quot;bors&quot;</span>, bytes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#368\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a mutable byte slice.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>The caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying <code>str</code> is used.</p>\n<p>Use of a <code>str</code> whose contents are not valid UTF-8 is undefined behavior.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">&quot;Hello&quot;</span>);\n<span class=\"kw\">let </span>bytes = <span class=\"kw\">unsafe </span>{ s.as_bytes_mut() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b&quot;Hello&quot;</span>, bytes);</code></pre></div>\n<p>Mutability:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">&quot;🗻∈🌏&quot;</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>bytes = s.as_bytes_mut();\n\n    bytes[<span class=\"number\">0</span>] = <span class=\"number\">0xF0</span>;\n    bytes[<span class=\"number\">1</span>] = <span class=\"number\">0x9F</span>;\n    bytes[<span class=\"number\">2</span>] = <span class=\"number\">0x8D</span>;\n    bytes[<span class=\"number\">3</span>] = <span class=\"number\">0x94</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;🍔∈🌏&quot;</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#398\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>The caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.as_mut_ptr\" title=\"method str::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Hello&quot;</span>;\n<span class=\"kw\">let </span>ptr = s.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#414\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts a mutable string slice to a raw pointer.</p>\n<p>As string slices are a slice of bytes, the raw pointer points to a\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>. This pointer will be pointing to the first byte of the string\nslice.</p>\n<p>It is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = String::from(<span class=\"string\">&quot;🗻∈🌏&quot;</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;🗻&quot;</span>), v.get(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n\n<span class=\"comment\">// indices not on UTF-8 sequence boundaries\n</span><span class=\"macro\">assert!</span>(v.get(<span class=\"number\">1</span>..).is_none());\n<span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">8</span>).is_none());\n\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get(..<span class=\"number\">42</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#471\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a>&gt;<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a mutable subslice of <code>str</code>.</p>\n<p>This is the non-panicking alternative to indexing the <code>str</code>. Returns\n<a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> whenever equivalent indexing operation would panic.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">&quot;hello&quot;</span>);\n<span class=\"comment\">// correct length\n</span><span class=\"macro\">assert!</span>(v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">5</span>).is_some());\n<span class=\"comment\">// out of bounds\n</span><span class=\"macro\">assert!</span>(v.get_mut(..<span class=\"number\">42</span>).is_none());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;he&quot;</span>), v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>).map(|v| <span class=\"kw-2\">&amp;*</span>v));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;hello&quot;</span>, v);\n{\n    <span class=\"kw\">let </span>s = v.get_mut(<span class=\"number\">0</span>..<span class=\"number\">2</span>);\n    <span class=\"kw\">let </span>s = s.map(|s| {\n        s.make_ascii_uppercase();\n        <span class=\"kw-2\">&amp;*</span>s\n    });\n    <span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;HE&quot;</span>), s);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;HEllo&quot;</span>, v);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#503\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(&amp;self, i: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns an unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"string\">&quot;🗻∈🌏&quot;</span>;\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;🗻&quot;</span>, v.get_unchecked(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;∈&quot;</span>, v.get_unchecked(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;🌏&quot;</span>, v.get_unchecked(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#538\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    i: I\n) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex::Output\">Output</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.SliceIndex.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a mutable, unchecked subslice of <code>str</code>.</p>\n<p>This is the unchecked alternative to indexing the <code>str</code>.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>Callers of this function are responsible that these preconditions are\nsatisfied:</p>\n<ul>\n<li>The starting index must not exceed the ending index;</li>\n<li>Indexes must be within bounds of the original slice;</li>\n<li>Indexes must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<p>Failing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the <code>str</code> type.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">&quot;🗻∈🌏&quot;</span>);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;🗻&quot;</span>, v.get_unchecked_mut(<span class=\"number\">0</span>..<span class=\"number\">4</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;∈&quot;</span>, v.get_unchecked_mut(<span class=\"number\">4</span>..<span class=\"number\">7</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;🌏&quot;</span>, v.get_unchecked_mut(<span class=\"number\">7</span>..<span class=\"number\">11</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#589\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.slice_unchecked\" class=\"fn\">slice_unchecked</a>(&amp;self, begin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.</p>\n<p>This is generally not recommended, use with caution! For a safe\nalternative see <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\"><code>Index</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get a mutable string slice instead, see the\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.slice_mut_unchecked\" title=\"method str::slice_mut_unchecked\"><code>slice_mut_unchecked</code></a> method.</p>\n<h5 id=\"safety-3\"><a href=\"#safety-3\">Safety</a></h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>, s.slice_unchecked(<span class=\"number\">0</span>, <span class=\"number\">21</span>));\n}\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;Hello, world!&quot;</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;world&quot;</span>, s.slice_unchecked(<span class=\"number\">7</span>, <span class=\"number\">12</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_mut_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#622\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.slice_mut_unchecked\" class=\"fn\">slice_mut_unchecked</a>(\n    &amp;mut self,\n    begin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.29.0: use <code>get_unchecked_mut(begin..end)</code> instead</span></div></span></summary><div class=\"docblock\"><p>Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> and <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\"><code>IndexMut</code></a>.</p>\n<p>This new slice goes from <code>begin</code> to <code>end</code>, including <code>begin</code> but\nexcluding <code>end</code>.</p>\n<p>To get an immutable string slice instead, see the\n<a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.slice_unchecked\" title=\"method str::slice_unchecked\"><code>slice_unchecked</code></a> method.</p>\n<h5 id=\"safety-4\"><a href=\"#safety-4\">Safety</a></h5>\n<p>Callers of this function are responsible that three preconditions are\nsatisfied:</p>\n<ul>\n<li><code>begin</code> must not exceed <code>end</code>.</li>\n<li><code>begin</code> and <code>end</code> must be byte positions within the string slice.</li>\n<li><code>begin</code> and <code>end</code> must lie on UTF-8 sequence boundaries.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#660\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_at\" class=\"fn\">split_at</a>(&amp;self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get mutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_at_mut\" title=\"method str::split_at_mut\"><code>split_at_mut</code></a>\nmethod.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Per Martin-Löf&quot;</span>;\n\n<span class=\"kw\">let </span>(first, last) = s.split_at(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Per&quot;</span>, first);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot; Martin-Löf&quot;</span>, last);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_at_mut\" class=\"fn\">split_at_mut</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Divide one mutable string slice into two at an index.</p>\n<p>The argument, <code>mid</code>, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.</p>\n<p>The two slices returned go from the start of the string slice to <code>mid</code>,\nand from <code>mid</code> to the end of the string slice.</p>\n<p>To get immutable string slices instead, see the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_at\" title=\"method str::split_at\"><code>split_at</code></a> method.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if <code>mid</code> is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">&quot;Per Martin-Löf&quot;</span>.to_string();\n{\n    <span class=\"kw\">let </span>(first, last) = s.split_at_mut(<span class=\"number\">3</span>);\n    first.make_ascii_uppercase();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;PER&quot;</span>, first);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot; Martin-Löf&quot;</span>, last);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;PER Martin-Löf&quot;</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chars\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.chars\" class=\"fn\">chars</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chars&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns such an iterator.</p>\n<p>It’s important to remember that <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar\nValue, and might not match your idea of what a ‘character’ is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust’s standard library, check crates.io instead.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">&quot;goodbye&quot;</span>;\n\n<span class=\"kw\">let </span>count = word.chars().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = word.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;g&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;o&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;o&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;d&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;b&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;y&#39;</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;e&#39;</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div>\n<p>Remember, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>y = <span class=\"string\">&quot;y̆&quot;</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = y.chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;y&#39;</span>), chars.next()); <span class=\"comment\">// not &#39;y̆&#39;\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;\\u{0306}&#39;</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.char_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#825\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.char_indices\" class=\"fn\">char_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.CharIndices.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::CharIndices\">CharIndices</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CharIndices&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of a string slice, and their\npositions.</p>\n<p>As a string slice consists of valid UTF-8, we can iterate through a\nstring slice by <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns an iterator of both\nthese <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, as well as their byte positions.</p>\n<p>The iterator yields tuples. The position is first, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> is\nsecond.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>word = <span class=\"string\">&quot;goodbye&quot;</span>;\n\n<span class=\"kw\">let </span>count = word.char_indices().count();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">7</span>, count);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = word.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">&#39;g&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">&#39;o&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">2</span>, <span class=\"string\">&#39;o&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">&#39;d&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">&#39;b&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">5</span>, <span class=\"string\">&#39;y&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">6</span>, <span class=\"string\">&#39;e&#39;</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre></div>\n<p>Remember, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>yes = <span class=\"string\">&quot;y̆es&quot;</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>char_indices = yes.char_indices();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">0</span>, <span class=\"string\">&#39;y&#39;</span>)), char_indices.next()); <span class=\"comment\">// not (0, &#39;y̆&#39;)\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">&#39;\\u{0306}&#39;</span>)), char_indices.next());\n\n<span class=\"comment\">// note the 3 here - the previous character took up two bytes\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">3</span>, <span class=\"string\">&#39;e&#39;</span>)), char_indices.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>((<span class=\"number\">4</span>, <span class=\"string\">&#39;s&#39;</span>)), char_indices.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, char_indices.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#848\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.bytes\" class=\"fn\">bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Bytes.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Bytes\">Bytes</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator over the bytes of a string slice.</p>\n<p>As a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"string\">&quot;bors&quot;</span>.bytes();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b&#39;b&#39;</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b&#39;o&#39;</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b&#39;r&#39;</span>), bytes.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">b&#39;s&#39;</span>), bytes.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, bytes.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#900\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_whitespace\" class=\"fn\">split_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.SplitWhitespace.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::SplitWhitespace\">SplitWhitespace</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitWhitespace&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits a string slice by whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>. If you only want to split on ASCII whitespace\ninstead, use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_ascii_whitespace\" title=\"method str::split_ascii_whitespace\"><code>split_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">&quot;A few words&quot;</span>.split_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;A&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;few&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;words&quot;</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>All kinds of whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">&quot; Mary   had\\ta\\u{2009}little  \\n\\t lamb&quot;</span>.split_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;Mary&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;had&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;a&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;little&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;lamb&quot;</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>If the string is empty or all whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;&quot;</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;   &quot;</span>.split_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_ascii_whitespace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#949\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_ascii_whitespace\" class=\"fn\">split_ascii_whitespace</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.SplitAsciiWhitespace.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::SplitAsciiWhitespace\">SplitAsciiWhitespace</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitAsciiWhitespace&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Splits a string slice by ASCII whitespace.</p>\n<p>The iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.</p>\n<p>To split by Unicode <code>Whitespace</code> instead, use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a>.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">&quot;A few words&quot;</span>.split_ascii_whitespace();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;A&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;few&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;words&quot;</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>All kinds of ASCII whitespace are considered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = <span class=\"string\">&quot; Mary   had\\ta little  \\n\\t lamb&quot;</span>.split_ascii_whitespace();\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;Mary&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;had&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;a&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;little&quot;</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;lamb&quot;</span>), iter.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());</code></pre></div>\n<p>If the string is empty or all ASCII whitespace, the iterator yields no string slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;&quot;</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;   &quot;</span>.split_ascii_whitespace().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lines\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1002\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.lines\" class=\"fn\">lines</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Lines.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Lines\">Lines</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator over the lines of a string, as string slices.</p>\n<p>Lines are split at line endings that are either newlines (<code>\\n</code>) or\nsequences of a carriage return followed by a line feed (<code>\\r\\n</code>).</p>\n<p>Line terminators are not included in the lines returned by the iterator.</p>\n<p>Note that any carriage return (<code>\\r</code>) not immediately followed by a\nline feed (<code>\\n</code>) does not split a line. These carriage returns are\nthereby included in the produced lines.</p>\n<p>The final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">&quot;foo\\r\\nbar\\n\\nbaz\\r&quot;</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;&quot;</span>), lines.next());\n<span class=\"comment\">// Trailing carriage return is included in the last line\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;baz\\r&quot;</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre></div>\n<p>The final line does not require any ending:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">&quot;foo\\nbar\\n\\r\\nbaz&quot;</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines = text.lines();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;&quot;</span>), lines.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;baz&quot;</span>), lines.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, lines.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lines_any\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1011\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.lines_any\" class=\"fn\">lines_any</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.LinesAny.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::LinesAny\">LinesAny</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"LinesAny&lt;&#39;_&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.4.0: use lines() instead now</span></div></span></summary><div class=\"docblock\"><p>An iterator over the lines of a string.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1030\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.encode_utf16\" class=\"fn\">encode_utf16</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.EncodeUtf16.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::EncodeUtf16\">EncodeUtf16</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EncodeUtf16&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator of <code>u16</code> over the string encoded as UTF-16.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text = <span class=\"string\">&quot;Zażółć gęślą jaźń&quot;</span>;\n\n<span class=\"kw\">let </span>utf8_len = text.len();\n<span class=\"kw\">let </span>utf16_len = text.encode_utf16().count();\n\n<span class=\"macro\">assert!</span>(utf16_len &lt;= utf8_len);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1055\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.contains\" class=\"fn\">contains</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a sub-slice of\nthis string slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">&quot;bananas&quot;</span>;\n\n<span class=\"macro\">assert!</span>(bananas.contains(<span class=\"string\">&quot;nana&quot;</span>));\n<span class=\"macro\">assert!</span>(!bananas.contains(<span class=\"string\">&quot;apples&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1079\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.starts_with\" class=\"fn\">starts_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a prefix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">&quot;bananas&quot;</span>;\n\n<span class=\"macro\">assert!</span>(bananas.starts_with(<span class=\"string\">&quot;bana&quot;</span>));\n<span class=\"macro\">assert!</span>(!bananas.starts_with(<span class=\"string\">&quot;nana&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1103-1105\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.ends_with\" class=\"fn\">ends_with</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given pattern matches a suffix of this\nstring slice.</p>\n<p>Returns <code>false</code> if it does not.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bananas = <span class=\"string\">&quot;bananas&quot;</span>;\n\n<span class=\"macro\">assert!</span>(bananas.ends_with(<span class=\"string\">&quot;anas&quot;</span>));\n<span class=\"macro\">assert!</span>(!bananas.ends_with(<span class=\"string\">&quot;nana&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1154\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.find\" class=\"fn\">find</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns the byte index of the first character of this string slice that\nmatches the pattern.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard Gepardi&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">&#39;L&#39;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">&#39;é&#39;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(<span class=\"string\">&quot;pard&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">17</span>));</code></pre></div>\n<p>More complex patterns using point-free style and closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(s.find(|c: char| (c &lt; <span class=\"string\">&#39;o&#39;</span>) &amp;&amp; (c &gt; <span class=\"string\">&#39;a&#39;</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.find(x), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rfind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1200-1202\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rfind\" class=\"fn\">rfind</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns the byte index for the first character of the last match of the pattern in\nthis string slice.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the pattern doesn’t match.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard Gepardi&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">&#39;L&#39;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">&#39;é&#39;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">14</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(<span class=\"string\">&quot;pard&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));</code></pre></div>\n<p>More complex patterns with closures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_whitespace), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(s.rfind(char::is_lowercase), <span class=\"prelude-val\">Some</span>(<span class=\"number\">20</span>));</code></pre></div>\n<p>Not finding the pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Löwe 老虎 Léopard&quot;</span>;\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.rfind(x), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1322\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split\" class=\"fn\">split</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Split.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Split\">Split</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior\"><a href=\"#iterator-behavior\">Iterator behavior</a></h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.rsplit\" title=\"method str::rsplit\"><code>rsplit</code></a> method can be used.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lamb&quot;</span>.split(<span class=\"string\">&#39; &#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;Mary&quot;</span>, <span class=\"string\">&quot;had&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;little&quot;</span>, <span class=\"string\">&quot;lamb&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;&quot;</span>.split(<span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lionXXtigerXleopard&quot;</span>.split(<span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lion&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;leopard&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lion::tiger::leopard&quot;</span>.split(<span class=\"string\">&quot;::&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lion&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;leopard&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abc1def2ghi&quot;</span>.split(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lionXtigerXleopard&quot;</span>.split(char::is_uppercase).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lion&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;leopard&quot;</span>]);</code></pre></div>\n<p>If the pattern is a slice of chars, split on each occurrence of any of the characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;2020-11-03 23:59&quot;</span>.split(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;-&#39;</span>, <span class=\"string\">&#39; &#39;</span>, <span class=\"string\">&#39;:&#39;</span>, <span class=\"string\">&#39;@&#39;</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;2020&quot;</span>, <span class=\"string\">&quot;11&quot;</span>, <span class=\"string\">&quot;03&quot;</span>, <span class=\"string\">&quot;23&quot;</span>, <span class=\"string\">&quot;59&quot;</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abc1defXghi&quot;</span>.split(|c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>]);</code></pre></div>\n<p>If a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">&quot;||||a||b|c&quot;</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">&#39;|&#39;</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</code></pre></div>\n<p>Contiguous separators are separated by the empty string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">&quot;(///)&quot;</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">&#39;/&#39;</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;(&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;)&quot;</span>]);</code></pre></div>\n<p>Separators at the start or end of a string are neighbored\nby empty strings.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;010&quot;</span>.split(<span class=\"string\">&quot;0&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;&quot;</span>]);</code></pre></div>\n<p>When the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;rust&quot;</span>.split(<span class=\"string\">&quot;&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(f, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, <span class=\"string\">&quot;u&quot;</span>, <span class=\"string\">&quot;s&quot;</span>, <span class=\"string\">&quot;t&quot;</span>, <span class=\"string\">&quot;&quot;</span>]);</code></pre></div>\n<p>Contiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"string\">&quot;    a  b c&quot;</span>.to_string();\n<span class=\"kw\">let </span>d: Vec&lt;<span class=\"kw\">_</span>&gt; = x.split(<span class=\"string\">&#39; &#39;</span>).collect();\n\n<span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</code></pre></div>\n<p>It does <em>not</em> give you:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(d, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</code></pre></div>\n<p>Use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_whitespace\" title=\"method str::split_whitespace\"><code>split_whitespace</code></a> for this behavior.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_inclusive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1362\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_inclusive\" class=\"fn\">split_inclusive</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.SplitInclusive.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::SplitInclusive\">SplitInclusive</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitInclusive&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n<code>split</code> in that <code>split_inclusive</code> leaves the matched part as the\nterminator of the substring.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lamb\\nlittle lamb\\nlittle lamb.&quot;\n    </span>.split_inclusive(<span class=\"string\">&#39;\\n&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;Mary had a little lamb\\n&quot;</span>, <span class=\"string\">&quot;little lamb\\n&quot;</span>, <span class=\"string\">&quot;little lamb.&quot;</span>]);</code></pre></div>\n<p>If the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n&quot;\n    </span>.split_inclusive(<span class=\"string\">&#39;\\n&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;Mary had a little lamb\\n&quot;</span>, <span class=\"string\">&quot;little lamb\\n&quot;</span>, <span class=\"string\">&quot;little lamb.\\n&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1417-1419\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rsplit\" class=\"fn\">rsplit</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.RSplit.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::RSplit\">RSplit</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplit&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-1\"><a href=\"#iterator-behavior-1\">Iterator behavior</a></h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a> method can be used.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lamb&quot;</span>.rsplit(<span class=\"string\">&#39; &#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lamb&quot;</span>, <span class=\"string\">&quot;little&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;had&quot;</span>, <span class=\"string\">&quot;Mary&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;&quot;</span>.rsplit(<span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lionXXtigerXleopard&quot;</span>.rsplit(<span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;leopard&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;lion&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lion::tiger::leopard&quot;</span>.rsplit(<span class=\"string\">&quot;::&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;leopard&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;lion&quot;</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abc1defXghi&quot;</span>.rsplit(|c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1466\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_terminator\" class=\"fn\">split_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.SplitTerminator.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::SplitTerminator\">SplitTerminator</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitTerminator&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring\nis skipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-2\"><a href=\"#iterator-behavior-2\">Iterator behavior</a></h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.rsplit_terminator\" title=\"method str::rsplit_terminator\"><code>rsplit_terminator</code></a> method can be used.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A.B.&quot;</span>.split_terminator(<span class=\"string\">&#39;.&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A..B..&quot;</span>.split_terminator(<span class=\"string\">&quot;.&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A.B:C.D&quot;</span>.split_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;.&#39;</span>, <span class=\"string\">&#39;:&#39;</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_terminator\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1512-1514\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rsplit_terminator\" class=\"fn\">rsplit_terminator</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.RSplitTerminator.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::RSplitTerminator\">RSplitTerminator</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitTerminator&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of <code>self</code>, separated by characters\nmatched by a pattern and yielded in reverse order.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<p>Equivalent to <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split\" title=\"method str::split\"><code>split</code></a>, except that the trailing substring is\nskipped if empty.</p>\n<p>This method can be used for string data that is <em>terminated</em>,\nrather than <em>separated</em> by a pattern.</p>\n<h5 id=\"iterator-behavior-3\"><a href=\"#iterator-behavior-3\">Iterator behavior</a></h5>\n<p>The returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.split_terminator\" title=\"method str::split_terminator\"><code>split_terminator</code></a> method can be\nused.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A.B.&quot;</span>.rsplit_terminator(<span class=\"string\">&#39;.&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;A&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A..B..&quot;</span>.rsplit_terminator(<span class=\"string\">&quot;.&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;A&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;A.B:C.D&quot;</span>.rsplit_terminator(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;.&#39;</span>, <span class=\"string\">&#39;:&#39;</span>][..]).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;A&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.splitn\" class=\"fn\">splitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.SplitN.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::SplitN\">SplitN</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitN&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-4\"><a href=\"#iterator-behavior-4\">Iterator behavior</a></h5>\n<p>The returned iterator will not be double ended, because it is\nnot efficient to support.</p>\n<p>If the pattern allows a reverse search, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.rsplitn\" title=\"method str::rsplitn\"><code>rsplitn</code></a> method can be\nused.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lambda&quot;</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">&#39; &#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;Mary&quot;</span>, <span class=\"string\">&quot;had&quot;</span>, <span class=\"string\">&quot;a little lambda&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lionXXtigerXleopard&quot;</span>.splitn(<span class=\"number\">3</span>, <span class=\"string\">&quot;X&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lion&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;tigerXleopard&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abcXdef&quot;</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abcXdef&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;&quot;</span>.splitn(<span class=\"number\">1</span>, <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;&quot;</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abc1defXghi&quot;</span>.splitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;defXghi&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1616-1618\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rsplitn\" class=\"fn\">rsplitn</a>&lt;'a, P&gt;(&amp;'a self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.RSplitN.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::RSplitN\">RSplitN</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitN&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most <code>n</code> items.</p>\n<p>If <code>n</code> substrings are returned, the last substring (the <code>n</code>th substring)\nwill contain the remainder of the string.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-5\"><a href=\"#iterator-behavior-5\">Iterator behavior</a></h5>\n<p>The returned iterator will not be double ended, because it is not\nefficient to support.</p>\n<p>For splitting from the front, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.splitn\" title=\"method str::splitn\"><code>splitn</code></a> method can be used.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;Mary had a little lamb&quot;</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">&#39; &#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;lamb&quot;</span>, <span class=\"string\">&quot;little&quot;</span>, <span class=\"string\">&quot;Mary had a&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lionXXtigerXleopard&quot;</span>.rsplitn(<span class=\"number\">3</span>, <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;leopard&quot;</span>, <span class=\"string\">&quot;tiger&quot;</span>, <span class=\"string\">&quot;lionX&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;lion::tiger::leopard&quot;</span>.rsplitn(<span class=\"number\">2</span>, <span class=\"string\">&quot;::&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;leopard&quot;</span>, <span class=\"string\">&quot;lion::tiger&quot;</span>]);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abc1defXghi&quot;</span>.rsplitn(<span class=\"number\">2</span>, |c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&quot;abc1def&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1636\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.split_once\" class=\"fn\">split_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg&quot;</span>.split_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg=&quot;</span>.split_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;cfg&quot;</span>, <span class=\"string\">&quot;&quot;</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg=foo&quot;</span>.split_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;cfg&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg=foo=bar&quot;</span>.split_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;cfg&quot;</span>, <span class=\"string\">&quot;foo=bar&quot;</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1654-1656\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rsplit_once\" class=\"fn\">rsplit_once</a>&lt;'a, P&gt;(&amp;'a self, delimiter: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg&quot;</span>.rsplit_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg=foo&quot;</span>.rsplit_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;cfg&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;cfg=foo=bar&quot;</span>.rsplit_once(<span class=\"string\">&#39;=&#39;</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;cfg=foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1694\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.matches\" class=\"fn\">matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Matches.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Matches\">Matches</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Matches&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within the given string\nslice.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-6\"><a href=\"#iterator-behavior-6\">Iterator behavior</a></h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.rmatches\" title=\"method str::rmatches\"><code>rmatches</code></a> method can be used.</p>\n<h5 id=\"examples-36\"><a href=\"#examples-36\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abcXXXabcYYYabc&quot;</span>.matches(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;1abc2abc3&quot;</span>.matches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rmatches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1728-1730\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rmatches\" class=\"fn\">rmatches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.RMatches.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::RMatches\">RMatches</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RMatches&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-7\"><a href=\"#iterator-behavior-7\">Iterator behavior</a></h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.matches\" title=\"method str::matches\"><code>matches</code></a> method can be used.</p>\n<h5 id=\"examples-37\"><a href=\"#examples-37\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;abcXXXabcYYYabc&quot;</span>.rmatches(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"string\">&quot;1abc2abc3&quot;</span>.rmatches(char::is_numeric).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;1&quot;</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.match_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1772\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.match_indices\" class=\"fn\">match_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.MatchIndices.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::MatchIndices\">MatchIndices</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MatchIndices&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the first match are returned.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-8\"><a href=\"#iterator-behavior-8\">Iterator behavior</a></h5>\n<p>The returned iterator will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, but not for <code>&amp;str</code>.</p>\n<p>If the pattern allows a reverse search but its results might differ\nfrom a forward search, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.rmatch_indices\" title=\"method str::rmatch_indices\"><code>rmatch_indices</code></a> method can be used.</p>\n<h5 id=\"examples-38\"><a href=\"#examples-38\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;abcXXXabcYYYabc&quot;</span>.match_indices(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">6</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">12</span>, <span class=\"string\">&quot;abc&quot;</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;1abcabc2&quot;</span>.match_indices(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">1</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">4</span>, <span class=\"string\">&quot;abc&quot;</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;ababa&quot;</span>.match_indices(<span class=\"string\">&quot;aba&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">0</span>, <span class=\"string\">&quot;aba&quot;</span>)]); <span class=\"comment\">// only the first `aba`</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rmatch_indices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1812-1814\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.rmatch_indices\" class=\"fn\">rmatch_indices</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.RMatchIndices.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::RMatchIndices\">RMatchIndices</a>&lt;'a, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RMatchIndices&lt;&#39;a, P&gt;\">ⓘ</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>An iterator over the disjoint matches of a pattern within <code>self</code>,\nyielded in reverse order along with the index of the match.</p>\n<p>For matches of <code>pat</code> within <code>self</code> that overlap, only the indices\ncorresponding to the last match are returned.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"iterator-behavior-9\"><a href=\"#iterator-behavior-9\">Iterator behavior</a></h5>\n<p>The returned iterator requires that the pattern supports a reverse\nsearch, and it will be a <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/double_ended/trait.DoubleEndedIterator.html\" title=\"trait core::iter::traits::double_ended::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> if a forward/reverse\nsearch yields the same elements.</p>\n<p>For iterating from the front, the <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.match_indices\" title=\"method str::match_indices\"><code>match_indices</code></a> method can be used.</p>\n<h5 id=\"examples-39\"><a href=\"#examples-39\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;abcXXXabcYYYabc&quot;</span>.rmatch_indices(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">12</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">6</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">0</span>, <span class=\"string\">&quot;abc&quot;</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;1abcabc2&quot;</span>.rmatch_indices(<span class=\"string\">&quot;abc&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">4</span>, <span class=\"string\">&quot;abc&quot;</span>), (<span class=\"number\">1</span>, <span class=\"string\">&quot;abc&quot;</span>)]);\n\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"string\">&quot;ababa&quot;</span>.rmatch_indices(<span class=\"string\">&quot;aba&quot;</span>).collect();\n<span class=\"macro\">assert_eq!</span>(v, [(<span class=\"number\">2</span>, <span class=\"string\">&quot;aba&quot;</span>)]); <span class=\"comment\">// only the last `aba`</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1836\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim\" class=\"fn\">trim</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading and trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"examples-40\"><a href=\"#examples-40\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;\\n Hello\\tworld\\t\\n&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Hello\\tworld&quot;</span>, s.trim());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1875\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_start\" class=\"fn\">trim_start</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality\"><a href=\"#text-directionality\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-41\"><a href=\"#examples-41\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;\\n Hello\\tworld\\t\\n&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Hello\\tworld\\t\\n&quot;</span>, s.trim_start());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;  English  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;E&#39;</span>) == s.trim_start().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;  עברית  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;ע&#39;</span>) == s.trim_start().chars().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1914\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_end\" class=\"fn\">trim_end</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>, which includes newlines.</p>\n<h5 id=\"text-directionality-1\"><a href=\"#text-directionality-1\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-42\"><a href=\"#examples-42\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;\\n Hello\\tworld\\t\\n&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;\\n Hello\\tworld&quot;</span>, s.trim_end());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;  English  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;h&#39;</span>) == s.trim_end().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;  עברית  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;ת&#39;</span>) == s.trim_end().chars().rev().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1954\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_left\" class=\"fn\">trim_left</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with leading whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-2\"><a href=\"#text-directionality-2\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-43\"><a href=\"#examples-43\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot; Hello\\tworld\\t&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;Hello\\tworld\\t&quot;</span>, s.trim_left());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;  English&quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;E&#39;</span>) == s.trim_left().chars().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;  עברית&quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;ע&#39;</span>) == s.trim_left().chars().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#1994\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_right\" class=\"fn\">trim_right</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with trailing whitespace removed.</p>\n<p>‘Whitespace’ is defined according to the terms of the Unicode Derived\nCore Property <code>White_Space</code>.</p>\n<h5 id=\"text-directionality-3\"><a href=\"#text-directionality-3\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-44\"><a href=\"#examples-44\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot; Hello\\tworld\\t&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot; Hello\\tworld&quot;</span>, s.trim_right());</code></pre></div>\n<p>Directionality:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;English  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;h&#39;</span>) == s.trim_right().chars().rev().next());\n\n<span class=\"kw\">let </span>s = <span class=\"string\">&quot;עברית  &quot;</span>;\n<span class=\"macro\">assert!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">&#39;ת&#39;</span>) == s.trim_right().chars().rev().next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2027-2029\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_matches\" class=\"fn\">trim_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a function\nor closure that determines if a character matches.</p>\n<h5 id=\"examples-45\"><a href=\"#examples-45\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;11foo1bar11&quot;</span>.trim_matches(<span class=\"string\">&#39;1&#39;</span>), <span class=\"string\">&quot;foo1bar&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;123foo1bar123&quot;</span>.trim_matches(char::is_numeric), <span class=\"string\">&quot;foo1bar&quot;</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;12foo1bar12&quot;</span>.trim_matches(x), <span class=\"string\">&quot;foo1bar&quot;</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;1foo1barXX&quot;</span>.trim_matches(|c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>), <span class=\"string\">&quot;foo1bar&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_start_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2074\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_start_matches\" class=\"fn\">trim_start_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-4\"><a href=\"#text-directionality-4\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. <code>start</code> in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.</p>\n<h5 id=\"examples-46\"><a href=\"#examples-46\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;11foo1bar11&quot;</span>.trim_start_matches(<span class=\"string\">&#39;1&#39;</span>), <span class=\"string\">&quot;foo1bar11&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;123foo1bar123&quot;</span>.trim_start_matches(char::is_numeric), <span class=\"string\">&quot;foo1bar123&quot;</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;12foo1bar12&quot;</span>.trim_start_matches(x), <span class=\"string\">&quot;foo1bar12&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2107\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;'a, P&gt;(&amp;'a self, prefix: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the prefix removed.</p>\n<p>If the string starts with the pattern <code>prefix</code>, returns substring after the prefix, wrapped\nin <code>Some</code>.  Unlike <code>trim_start_matches</code>, this method removes the prefix exactly once.</p>\n<p>If the string does not start with <code>prefix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-47\"><a href=\"#examples-47\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;foo:bar&quot;</span>.strip_prefix(<span class=\"string\">&quot;foo:&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;foo:bar&quot;</span>.strip_prefix(<span class=\"string\">&quot;bar&quot;</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;foofoo&quot;</span>.strip_prefix(<span class=\"string\">&quot;foo&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strip_suffix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2134-2137\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.strip_suffix\" class=\"fn\">strip_suffix</a>&lt;'a, P&gt;(&amp;'a self, suffix: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with the suffix removed.</p>\n<p>If the string ends with the pattern <code>suffix</code>, returns the substring before the suffix,\nwrapped in <code>Some</code>.  Unlike <code>trim_end_matches</code>, this method removes the suffix exactly once.</p>\n<p>If the string does not end with <code>suffix</code>, returns <code>None</code>.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"examples-48\"><a href=\"#examples-48\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;bar:foo&quot;</span>.strip_suffix(<span class=\"string\">&quot;:foo&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;bar:foo&quot;</span>.strip_suffix(<span class=\"string\">&quot;bar&quot;</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;foofoo&quot;</span>.strip_suffix(<span class=\"string\">&quot;foo&quot;</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_end_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2178-2180\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_end_matches\" class=\"fn\">trim_end_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-5\"><a href=\"#text-directionality-5\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. <code>end</code> in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.</p>\n<h5 id=\"examples-49\"><a href=\"#examples-49\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;11foo1bar11&quot;</span>.trim_end_matches(<span class=\"string\">&#39;1&#39;</span>), <span class=\"string\">&quot;11foo1bar&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;123foo1bar123&quot;</span>.trim_end_matches(char::is_numeric), <span class=\"string\">&quot;123foo1bar&quot;</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;12foo1bar12&quot;</span>.trim_end_matches(x), <span class=\"string\">&quot;12foo1bar&quot;</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;1fooX&quot;</span>.trim_end_matches(|c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>), <span class=\"string\">&quot;1foo&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_left_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2222\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_left_matches\" class=\"fn\">trim_left_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_start_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-6\"><a href=\"#text-directionality-6\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. ‘Left’ in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>right</em> side, not the left.</p>\n<h5 id=\"examples-50\"><a href=\"#examples-50\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;11foo1bar11&quot;</span>.trim_left_matches(<span class=\"string\">&#39;1&#39;</span>), <span class=\"string\">&quot;foo1bar11&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;123foo1bar123&quot;</span>.trim_left_matches(char::is_numeric), <span class=\"string\">&quot;foo1bar123&quot;</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;12foo1bar12&quot;</span>.trim_left_matches(x), <span class=\"string\">&quot;foo1bar12&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_right_matches\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2265-2267\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.trim_right_matches\" class=\"fn\">trim_right_matches</a>&lt;'a, P&gt;(&amp;'a self, pat: P) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.ReverseSearcher.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</span></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: superseded by <code>trim_end_matches</code></span></div></span></summary><div class=\"docblock\"><p>Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.</p>\n<p>The <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/index.html\" title=\"mod jumpy::prelude::bones_utils::prelude::alloc::str::pattern\">pattern</a> can be a <code>&amp;str</code>, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>, a slice of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s, or a\nfunction or closure that determines if a character matches.</p>\n<h5 id=\"text-directionality-7\"><a href=\"#text-directionality-7\">Text directionality</a></h5>\n<p>A string is a sequence of bytes. ‘Right’ in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are ‘right to left’ rather than ‘left to right’, this will be\nthe <em>left</em> side, not the right.</p>\n<h5 id=\"examples-51\"><a href=\"#examples-51\">Examples</a></h5>\n<p>Simple patterns:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;11foo1bar11&quot;</span>.trim_right_matches(<span class=\"string\">&#39;1&#39;</span>), <span class=\"string\">&quot;11foo1bar&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;123foo1bar123&quot;</span>.trim_right_matches(char::is_numeric), <span class=\"string\">&quot;123foo1bar&quot;</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">&#39;1&#39;</span>, <span class=\"string\">&#39;2&#39;</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;12foo1bar12&quot;</span>.trim_right_matches(x), <span class=\"string\">&quot;12foo1bar&quot;</span>);</code></pre></div>\n<p>A more complex pattern, using a closure:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;1fooX&quot;</span>.trim_right_matches(|c| c == <span class=\"string\">&#39;1&#39; </span>|| c == <span class=\"string\">&#39;X&#39;</span>), <span class=\"string\">&quot;1foo&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2317\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.parse\" class=\"fn\">parse</a>&lt;F&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;F, &lt;F as <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html#associatedtype.Err\" title=\"type jumpy::prelude::bones_utils::prelude::alloc::str::FromStr::Err\">Err</a>&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::FromStr\">FromStr</a>,</span></h4></section></summary><div class=\"docblock\"><p>Parses this string slice into another type.</p>\n<p>Because <code>parse</code> is so general, it can cause problems with type\ninference. As such, <code>parse</code> is one of the few times you’ll see\nthe syntax affectionately known as the ‘turbofish’: <code>::&lt;&gt;</code>. This\nhelps the inference algorithm understand specifically which type\nyou’re trying to parse into.</p>\n<p><code>parse</code> can parse into any type that implements the <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::FromStr\"><code>FromStr</code></a> trait.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>Will return <a href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html#associatedtype.Err\" title=\"associated type jumpy::prelude::bones_utils::prelude::alloc::str::FromStr::Err\"><code>Err</code></a> if it’s not possible to parse this string slice into\nthe desired type.</p>\n<h5 id=\"examples-52\"><a href=\"#examples-52\">Examples</a></h5>\n<p>Basic usage</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four: u32 = <span class=\"string\">&quot;4&quot;</span>.parse().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">4</span>, four);</code></pre></div>\n<p>Using the ‘turbofish’ instead of annotating <code>four</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>four = <span class=\"string\">&quot;4&quot;</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">4</span>), four);</code></pre></div>\n<p>Failing to parse:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nope = <span class=\"string\">&quot;j&quot;</span>.parse::&lt;u32&gt;();\n\n<span class=\"macro\">assert!</span>(nope.is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0, const since 1.74.0\">1.23.0 (const: 1.74.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2336\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if all characters in this string are within the ASCII range.</p>\n<h5 id=\"examples-53\"><a href=\"#examples-53\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ascii = <span class=\"string\">&quot;hello!\\n&quot;</span>;\n<span class=\"kw\">let </span>non_ascii = <span class=\"string\">&quot;Grüße, Jürgen ❤&quot;</span>;\n\n<span class=\"macro\">assert!</span>(ascii.is_ascii());\n<span class=\"macro\">assert!</span>(!non_ascii.is_ascii());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2348\">source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>)</span></div></span></summary><div class=\"docblock\"><p>If this string slice <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.is_ascii\" title=\"method str::is_ascii\"><code>is_ascii</code></a>, returns it as a slice\nof <a href=\"https://doc.rust-lang.org/1.75.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">ASCII characters</a>, otherwise returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2368\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two strings are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n<h5 id=\"examples-54\"><a href=\"#examples-54\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"string\">&quot;Ferris&quot;</span>.eq_ignore_ascii_case(<span class=\"string\">&quot;FERRIS&quot;</span>));\n<span class=\"macro\">assert!</span>(<span class=\"string\">&quot;Ferrös&quot;</span>.eq_ignore_ascii_case(<span class=\"string\">&quot;FERRöS&quot;</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"string\">&quot;Ferrös&quot;</span>.eq_ignore_ascii_case(<span class=\"string\">&quot;FERRÖS&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2393\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_uppercase\"><code>to_ascii_uppercase()</code></a>.</p>\n<h5 id=\"examples-55\"><a href=\"#examples-55\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">&quot;Grüße, Jürgen ❤&quot;</span>);\n\ns.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;GRüßE, JüRGEN ❤&quot;</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2420\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_lowercase\"><code>to_ascii_lowercase()</code></a>.</p>\n<h5 id=\"examples-56\"><a href=\"#examples-56\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">&quot;GRÜßE, JÜRGEN ❤&quot;</span>);\n\ns.make_ascii_lowercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;grÜße, jÜrgen ❤&quot;</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_debug\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2463\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.escape_debug\" class=\"fn\">escape_debug</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.EscapeDebug.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::EscapeDebug\">EscapeDebug</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDebug&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html#method.escape_debug\" title=\"method char::escape_debug\"><code>char::escape_debug</code></a>.</p>\n<p>Note: only extended grapheme codepoints that begin the string will be\nescaped.</p>\n<h5 id=\"examples-57\"><a href=\"#examples-57\">Examples</a></h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">&quot;❤\\n!&quot;</span>.escape_debug() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">&quot;{c}&quot;</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;{}&quot;</span>, <span class=\"string\">&quot;❤\\n!&quot;</span>.escape_debug());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;❤\\\\n!&quot;</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;❤\\n!&quot;</span>.escape_debug().to_string(), <span class=\"string\">&quot;❤\\\\n!&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2509\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.escape_default\" class=\"fn\">escape_default</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.EscapeDefault.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::EscapeDefault\">EscapeDefault</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDefault&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html#method.escape_default\" title=\"method char::escape_default\"><code>char::escape_default</code></a>.</p>\n<h5 id=\"examples-58\"><a href=\"#examples-58\">Examples</a></h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">&quot;❤\\n!&quot;</span>.escape_default() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">&quot;{c}&quot;</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;{}&quot;</span>, <span class=\"string\">&quot;❤\\n!&quot;</span>.escape_default());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;\\\\u{{2764}}\\\\n!&quot;</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;❤\\n!&quot;</span>.escape_default().to_string(), <span class=\"string\">&quot;\\\\u{2764}\\\\n!&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.escape_unicode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/str/mod.rs.html#2547\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.escape_unicode\" class=\"fn\">escape_unicode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.EscapeUnicode.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::EscapeUnicode\">EscapeUnicode</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeUnicode&lt;&#39;_&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator that escapes each char in <code>self</code> with <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html#method.escape_unicode\" title=\"method char::escape_unicode\"><code>char::escape_unicode</code></a>.</p>\n<h5 id=\"examples-59\"><a href=\"#examples-59\">Examples</a></h5>\n<p>As an iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>c <span class=\"kw\">in </span><span class=\"string\">&quot;❤\\n!&quot;</span>.escape_unicode() {\n    <span class=\"macro\">print!</span>(<span class=\"string\">&quot;{c}&quot;</span>);\n}\n<span class=\"macro\">println!</span>();</code></pre></div>\n<p>Using <code>println!</code> directly:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;{}&quot;</span>, <span class=\"string\">&quot;❤\\n!&quot;</span>.escape_unicode());</code></pre></div>\n<p>Both are equivalent to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">println!</span>(<span class=\"string\">&quot;\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}&quot;</span>);</code></pre></div>\n<p>Using <code>to_string</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;❤\\n!&quot;</span>.escape_unicode().to_string(), <span class=\"string\">&quot;\\\\u{2764}\\\\u{a}\\\\u{21}&quot;</span>);</code></pre></div>\n</div></details></div></details>",0,"jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#221\">source</a><a href=\"#impl-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Methods for string slices.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#236\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.into_boxed_bytes\" class=\"fn\">into_boxed_bytes</a>(self: <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code> without copying or allocating.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;this is a string&quot;</span>;\n<span class=\"kw\">let </span>boxed_str = s.to_owned().into_boxed_str();\n<span class=\"kw\">let </span>boxed_bytes = boxed_str.into_boxed_bytes();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>boxed_bytes, <span class=\"kw-2\">*</span>s.as_bytes());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#269\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.replace\" class=\"fn\">replace</a>&lt;'a, P&gt;(&amp;'a self, from: P, to: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Replaces all matches of a pattern with another string.</p>\n<p><code>replace</code> creates a new <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;this is old&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;this is new&quot;</span>, s.replace(<span class=\"string\">&quot;old&quot;</span>, <span class=\"string\">&quot;new&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;than an old&quot;</span>, s.replace(<span class=\"string\">&quot;is&quot;</span>, <span class=\"string\">&quot;an&quot;</span>));</code></pre></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;this is old&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replace(<span class=\"string\">&quot;cookie monster&quot;</span>, <span class=\"string\">&quot;little lamb&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replacen\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#309\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.replacen\" class=\"fn\">replacen</a>&lt;'a, P&gt;(&amp;'a self, pat: P, to: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a><span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/pattern/trait.Pattern.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Replaces first N matches of a pattern with another string.</p>\n<p><code>replacen</code> creates a new <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>, and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most <code>count</code> times.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;foo foo 123 foo&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;new new 123 foo&quot;</span>, s.replacen(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;new&quot;</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;faa fao 123 foo&quot;</span>, s.replacen(<span class=\"string\">&#39;o&#39;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;foo foo new23 foo&quot;</span>, s.replacen(char::is_numeric, <span class=\"string\">&quot;new&quot;</span>, <span class=\"number\">1</span>));</code></pre></div>\n<p>When the pattern doesn’t match, it returns this string slice as <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;this is old&quot;</span>;\n<span class=\"macro\">assert_eq!</span>(s, s.replacen(<span class=\"string\">&quot;cookie monster&quot;</span>, <span class=\"string\">&quot;little lamb&quot;</span>, <span class=\"number\">10</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#366\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.to_lowercase\" class=\"fn\">to_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the lowercase equivalent of this string slice, as a new <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>.</p>\n<p>‘Lowercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Lowercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;HELLO&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;hello&quot;</span>, s.to_lowercase());</code></pre></div>\n<p>A tricky example, with sigma:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>sigma = <span class=\"string\">&quot;Σ&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;σ&quot;</span>, sigma.to_lowercase());\n\n<span class=\"comment\">// but at the end of a word, it&#39;s ς, not σ:\n</span><span class=\"kw\">let </span>odysseus = <span class=\"string\">&quot;ὈΔΥΣΣΕΎΣ&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;ὀδυσσεύς&quot;</span>, odysseus.to_lowercase());</code></pre></div>\n<p>Languages without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">&quot;农历新年&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_lowercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#457\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.to_uppercase\" class=\"fn\">to_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns the uppercase equivalent of this string slice, as a new <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>.</p>\n<p>‘Uppercase’ is defined according to the terms of the Unicode Derived Core Property\n<code>Uppercase</code>.</p>\n<p>Since some characters can expand into multiple characters when changing\nthe case, this function returns a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a> instead of modifying the\nparameter in-place.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;hello&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;HELLO&quot;</span>, s.to_uppercase());</code></pre></div>\n<p>Scripts without case are not changed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_year = <span class=\"string\">&quot;农历新年&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(new_year, new_year.to_uppercase());</code></pre></div>\n<p>One character can become multiple:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;tschüß&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;TSCHÜSS&quot;</span>, s.to_uppercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#498\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.into_string\" class=\"fn\">into_string</a>(self: <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\"><code>Box&lt;str&gt;</code></a> into a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a> without copying or allocating.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>string = String::from(<span class=\"string\">&quot;birthday gift&quot;</span>);\n<span class=\"kw\">let </span>boxed_str = string.clone().into_boxed_str();\n\n<span class=\"macro\">assert_eq!</span>(boxed_str.into_string(), string);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.repeat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#527\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a> by repeating a string <code>n</code> times.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This function will panic if the capacity would overflow.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;abc&quot;</span>.repeat(<span class=\"number\">4</span>), String::from(<span class=\"string\">&quot;abcabcabcabc&quot;</span>));</code></pre></div>\n<p>A panic upon overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this will panic at runtime\n</span><span class=\"kw\">let </span>huge = <span class=\"string\">&quot;0123456789abcdef&quot;</span>.repeat(usize::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#557\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.make_ascii_uppercase\" title=\"method str::make_ascii_uppercase\"><code>make_ascii_uppercase</code></a>.</p>\n<p>To uppercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_uppercase\"><code>to_uppercase</code></a>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Grüße, Jürgen ❤&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;GRüßE, JüRGEN ❤&quot;</span>, s.to_ascii_uppercase());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#589\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html#method.make_ascii_lowercase\" title=\"method str::make_ascii_lowercase\"><code>make_ascii_lowercase</code></a>.</p>\n<p>To lowercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"#method.to_lowercase\"><code>to_lowercase</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = <span class=\"string\">&quot;Grüße, Jürgen ❤&quot;</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;grüße, jürgen ❤&quot;</span>, s.to_ascii_lowercase());</code></pre></div>\n</div></details></div></details>",0,"jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2208\">source</a></span><a href=\"#impl-Extend%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2209\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2214\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToOwned-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#205\">source</a></span><a href=\"#impl-ToOwned-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::ToOwned\">ToOwned</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#208\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Creates owned data from borrowed data, usually by cloning. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#212\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>)</h4></section></summary><div class='docblock'>Uses borrowed data to replace owned data, usually by cloning. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details>","ToOwned","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, str>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2333\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, str>>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2331\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2328\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a></span><a href=\"#impl-PartialEq%3CString%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2329\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Concat%3Cstr%3E-for-%5BS%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#61\">source</a><a href=\"#impl-Concat%3Cstr%3E-for-%5BS%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Concat.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::slice::Concat\">Concat</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[S]</a><span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h3></section></summary><div class=\"docblock\"><p>Note: <code>str</code> in <code>Concat&lt;str&gt;</code> is not meaningful here.\nThis type parameter of the trait only exists to enable another impl.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Concat.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>)</span></div></span><div class='docblock'>The resulting type after concatenation</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.concat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#64\">source</a><a href=\"#method.concat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/slice/trait.Concat.html#tymethod.concat\" class=\"fn\">concat</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[S]</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>)</span></div></span><div class='docblock'>Implementation of <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html#method.concat\" title=\"method slice::concat\"><code>[T]::concat</code></a></div></details></div></details>","Concat<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2740\">source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2742\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#188\">source</a></span><a href=\"#impl-Borrow%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#190\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/borrow.rs.html#464\">source</a></span><a href=\"#impl-AddAssign%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/borrow.rs.html#465\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2424\">source</a></span><a href=\"#impl-AddAssign%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"docblock\"><p>Implements the <code>+=</code> operator for appending to a <code>String</code>.</p>\n<p>This has the same behavior as the <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html#method.push_str\" title=\"method jumpy::prelude::bones_utils::prelude::alloc::string::String::push_str\"><code>push_str</code></a> method.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2426\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1263\">source</a></span><a href=\"#impl-Default-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1265\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#3044\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-Drain%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.Drain.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::Drain\">Drain</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#3045\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2732\">source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2734\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#196\">source</a></span><a href=\"#impl-BorrowMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/str.rs.html#198\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1549\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1562\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code></p>\n<p>This conversion allocates on the heap\nand performs a copy of <code>s</code>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(<span class=\"string\">&quot;hello&quot;</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">&quot;{boxed}&quot;</span>);</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#2345\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#2362\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\"><code>Error</code></a> + <a href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a> + <a href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">&quot;a str error&quot;</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1569\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1594\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'_, str&gt;</code> into a <code>Box&lt;str&gt;</code></p>\n<p>When <code>cow</code> is the <code>Cow::Borrowed</code> variant, this\nconversion allocates on the heap and copies the\nunderlying <code>str</code>. Otherwise, it will try to reuse the owned\n<code>String</code>’s allocation.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>unboxed = Cow::Borrowed(<span class=\"string\">&quot;hello&quot;</span>);\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">&quot;{boxed}&quot;</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unboxed = Cow::Owned(<span class=\"string\">&quot;hello&quot;</span>.to_string());\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">&quot;{boxed}&quot;</span>);</code></pre></div>\n</div></details></div></details>","From<Cow<'_, str>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#2369\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#2384\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"https://doc.rust-lang.org/1.75.0/core/error/trait.Error.html\" title=\"trait core::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">&quot;a str error&quot;</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2769\">source</a></span><a href=\"#impl-From%3C%26mut+str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2774\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut str</code> into a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details>","From<&mut str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Rc%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/rc.rs.html#2453\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Rc%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/rc/struct.Rc.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/rc.rs.html#2464\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/rc/struct.Rc.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted string slice and copy <code>v</code> into it.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>shared: Rc&lt;str&gt; = Rc::from(<span class=\"string\">&quot;statue&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;statue&quot;</span>, <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/vec/mod.rs.html#3284\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/vec/mod.rs.html#3292\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">&quot;123&quot;</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b&#39;1&#39;</span>, <span class=\"string\">b&#39;2&#39;</span>, <span class=\"string\">b&#39;3&#39;</span>]);</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2814\">source</a></span><a href=\"#impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2826\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a> to a boxed <code>str</code> slice that is owned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1: String = String::from(<span class=\"string\">&quot;hello world&quot;</span>);\n<span class=\"kw\">let </span>s2: Box&lt;str&gt; = Box::from(s1);\n<span class=\"kw\">let </span>s3: String = String::from(s2);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;hello world&quot;</span>, s3)</code></pre></div>\n</div></details></div></details>","From<String>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2757\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2762\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2857\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2871\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice into a <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html#variant.Borrowed\" title=\"borrow::Cow::Borrowed\"><code>Borrowed</code></a> variant.\nNo heap allocation is performed, and the string\nis not copied.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Cow::from(<span class=\"string\">&quot;eggplant&quot;</span>), Cow::Borrowed(<span class=\"string\">&quot;eggplant&quot;</span>));</code></pre></div>\n</div></details></div></details>","From<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Arc%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/sync.rs.html#3315\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Arc%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/sync/struct.Arc.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/sync.rs.html#3326\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/sync/struct.Arc.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>shared: Arc&lt;str&gt; = Arc::from(<span class=\"string\">&quot;eggplant&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;eggplant&quot;</span>, <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre></div>\n</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1327\">source</a></span><a href=\"#impl-Clone-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/boxed.rs.html#1328\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2931\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Cow%3C'a,+str%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2932\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(it: I) -&gt; <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2110\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/alloc/string.rs.html#2111\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a><span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppLabel-for-%26str\" class=\"impl\"><a href=\"#impl-AppLabel-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AppLabel for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Returns the representation of this label as a string literal. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_label\" class=\"method trait-impl\"><a href=\"#method.as_label\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_label</a>(&amp;self) -&gt; AppLabelId</h4></section></summary><div class='docblock'>Converts this type into an opaque, strongly-typed label.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a></h4></section></summary><div class='docblock'>Returns the [<code>TypeId</code>] used to differentiate labels.</div></details></div></details>","AppLabel","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSystemName%3C's%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CSystemName%3C's%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'s&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SystemName&lt;'s&gt;&gt; for &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(name: SystemName&lt;'s&gt;) -&gt; &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SystemName<'s>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-Unaligned-for-str\" class=\"impl\"><a href=\"#impl-Unaligned-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Unaligned for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","Unaligned","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromZeroes-for-str\" class=\"impl\"><a href=\"#impl-FromZeroes-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromZeroes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Overwrites <code>self</code> with zeroes. <a>Read more</a></div></details></div></details>","FromZeroes","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-str\" class=\"impl\"><a href=\"#impl-AsBytes-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Gets the bytes of this value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>bytes</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_prefix</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>bytes</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_suffix</a>(&amp;self, bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>bytes</code>. <a>Read more</a></div></details></div></details>","AsBytes","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/ser/impls.rs.html#40\">source</a><a href=\"#impl-Serialize-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/trait.Serialize.html\" title=\"trait jumpy::prelude::Serialize\">Serialize</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/ser/impls.rs.html#42-44\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</span></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"jumpy/prelude/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Box%3Cstr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#1866-1870\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"jumpy/prelude/trait.Deserialize.html\" title=\"trait jumpy::prelude::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#1866-1870\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"jumpy/prelude/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#643\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, 'a&gt; <a class=\"trait\" href=\"jumpy/prelude/trait.Deserialize.html\" title=\"trait jumpy::prelude::Deserialize\">Deserialize</a>&lt;'de&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    'de: 'a,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#644-646\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</span></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"jumpy/prelude/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Expected-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/mod.rs.html#490\">source</a><a href=\"#impl-Expected-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Expected.html\" title=\"trait serde::de::Expected\">Expected</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/mod.rs.html#491\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Expected.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format an explanation of what data was being expected. Same signature as\nthe <code>Display</code> and <code>Debug</code> traits.</div></details></div></details>","Expected","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/value.rs.html#406-408\">source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, 'a, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.197/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.197/serde/de/value/struct.StrDeserializer.html\" title=\"struct serde::de::value::StrDeserializer\">StrDeserializer</a>&lt;'a, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/value.rs.html#412\">source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.197/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/serde/1.0.197/serde/de/value/struct.StrDeserializer.html\" title=\"struct serde::de::value::StrDeserializer\">StrDeserializer</a>&lt;'a, E&gt;</h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsField-for-str\" class=\"impl\"><a href=\"#impl-AsField-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsField for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_field\" class=\"method trait-impl\"><a href=\"#method.as_field\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_field</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Field&gt;</h4></section></summary><div class='docblock'>Attempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified <code>metadata</code>. <a>Read more</a></div></details></div></details>","AsField","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-str\" class=\"impl\"><a href=\"#impl-Value-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Value for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-SmolStr\" class=\"impl\"><a href=\"#impl-Borrow%3Cstr%3E-for-SmolStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for SmolStr</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CSmolStr%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CSmolStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;SmolStr&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;SmolStr) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<SmolStr>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CSmolStr%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CSmolStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;SmolStr&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;SmolStr) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<SmolStr>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CMatch%3C'h%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CMatch%3C'h%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'h&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Match&lt;'h&gt;&gt; for &amp;'h <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(m: Match&lt;'h&gt;) -&gt; &amp;'h <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Match<'h>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Replacer-for-%26str\" class=\"impl\"><a href=\"#impl-Replacer-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Replacer for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_append\" class=\"method trait-impl\"><a href=\"#method.replace_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">replace_append</a>(&amp;mut self, caps: &amp;Captures&lt;'_&gt;, dst: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>)</h4></section></summary><div class='docblock'>Appends possibly empty data to <code>dst</code> to replace the current match. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_expansion\" class=\"method trait-impl\"><a href=\"#method.no_expansion\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">no_expansion</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;</h4></section></summary><div class='docblock'>Return a fixed unchanging replacement string. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>&lt;'r&gt;(&amp;'r mut self) -&gt; ReplacerRef&lt;'r, Self&gt;</h4></section></summary><div class='docblock'>Returns a type that implements <code>Replacer</code>, but that borrows and wraps\nthis <code>Replacer</code>. <a>Read more</a></div></details></div></details>","Replacer","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSpan%3E-for-str\" class=\"impl\"><a href=\"#impl-Index%3CSpan%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Span&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Span) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Span>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSpan%3E-for-str\" class=\"impl\"><a href=\"#impl-Index%3CSpan%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Span&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Span) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Span>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CArrayString%3CCAP%3E%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#552\">source</a><a href=\"#impl-PartialOrd%3CArrayString%3CCAP%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#554\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#557\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#558\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#559\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#560\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<ArrayString<CAP>>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CArrayString%3CCAP%3E%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#464\">source</a><a href=\"#impl-PartialEq%3CArrayString%3CCAP%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#466\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<ArrayString<CAP>>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-ArrayString%3CCAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#481\">source</a><a href=\"#impl-Borrow%3Cstr%3E-for-ArrayString%3CCAP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#483\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3Cstr%3E-for-ArrayString%3CCAP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#486\">source</a><a href=\"#impl-BorrowMut%3Cstr%3E-for-ArrayString%3CCAP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const CAP: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/arrayvec/0.7/arrayvec/array_string/struct.ArrayString.html\" title=\"struct arrayvec::array_string::ArrayString\">ArrayString</a>&lt;CAP&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/arrayvec/0.7/src/arrayvec/array_string.rs.html#488\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSpan%3E-for-str\" class=\"impl\"><a href=\"#impl-Index%3CSpan%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Span&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, span: Span) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.75.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Span>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnicodeWidthStr-for-str\" class=\"impl\"><a href=\"#impl-UnicodeWidthStr-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl UnicodeWidthStr for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.width\" class=\"method trait-impl\"><a href=\"#method.width\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the string’s displayed width in columns. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.width_cjk\" class=\"method trait-impl\"><a href=\"#method.width_cjk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">width_cjk</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the string’s displayed width in columns. <a>Read more</a></div></details></div></details>","UnicodeWidthStr","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PanicFmt-for-str\" class=\"impl\"><a href=\"#impl-PanicFmt-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PanicFmt for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.This\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.This\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">This</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The type after dereferencing all references. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Kind\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Kind\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Kind</a> = IsStdType</h4></section></summary><div class='docblock'>Whether this is a user-defined type or standard library type. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.PV_COUNT\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.PV_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">PV_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a> = 1usize</h4></section></summary><div class='docblock'>The length of the array returned in <code>Self::to_panicvals</code>\n(an inherent method that formats the type for panic messages).</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.PROOF\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.PROOF\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">PROOF</a>: IsPanicFmt&lt;Self, Self::This, Self::Kind&gt; = IsPanicFmt::NEW</h4></section></summary><div class='docblock'>A marker type that proves that <code>Self</code> implements <code>PanicFmt</code>. <a>Read more</a></div></details></div></details>","PanicFmt","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Adler32Hash-for-%26str\" class=\"impl\"><a href=\"#impl-Adler32Hash-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Adler32Hash for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Feeds this value into <code>Adler32</code>.</div></details></div></details>","Adler32Hash","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NixPath-for-str\" class=\"impl\"><a href=\"#impl-NixPath-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NixPath for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the path empty?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Length of the path in bytes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_nix_path\" class=\"method trait-impl\"><a href=\"#method.with_nix_path\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_nix_path</a>&lt;T, F&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; T,</span></h4></section></summary><div class='docblock'>Execute a function with this path as a <code>CStr</code>. <a>Read more</a></div></details></div></details>","NixPath","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Id\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-Id\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/egui/struct.Id.html\" title=\"struct jumpy::prelude::egui::Id\">Id</a></h3></section></summary><div class=\"docblock\"><p>Convenience</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(string: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/egui/struct.Id.html\" title=\"struct jumpy::prelude::egui::Id\">Id</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'static str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-WidgetText\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-WidgetText\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/egui/enum.WidgetText.html\" title=\"enum jumpy::prelude::egui::WidgetText\">WidgetText</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(text: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/egui/enum.WidgetText.html\" title=\"enum jumpy::prelude::egui::WidgetText\">WidgetText</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-RichText\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-RichText\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/egui/struct.RichText.html\" title=\"struct jumpy::prelude::egui::RichText\">RichText</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(text: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/egui/struct.RichText.html\" title=\"struct jumpy::prelude::egui::RichText\">RichText</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-ImageSource%3C'a%3E\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-ImageSource%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/egui/enum.ImageSource.html\" title=\"enum jumpy::prelude::egui::ImageSource\">ImageSource</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/egui/enum.ImageSource.html\" title=\"enum jumpy::prelude::egui::ImageSource\">ImageSource</a>&lt;'a&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TextBuffer-for-%26str\" class=\"impl\"><a href=\"#impl-TextBuffer-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"jumpy/prelude/egui/trait.TextBuffer.html\" title=\"trait jumpy::prelude::egui::TextBuffer\">TextBuffer</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Immutable view of a <code>&amp;str</code>!</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_mutable\" class=\"method trait-impl\"><a href=\"#method.is_mutable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.is_mutable\" class=\"fn\">is_mutable</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Can this text be edited?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Returns this buffer as a <code>str</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_text\" class=\"method trait-impl\"><a href=\"#method.insert_text\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.insert_text\" class=\"fn\">insert_text</a>(&amp;mut self, _text: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, _ch_idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Inserts text <code>text</code> into this buffer at character index <code>char_index</code>. <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.insert_text\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_char_range\" class=\"method trait-impl\"><a href=\"#method.delete_char_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.delete_char_range\" class=\"fn\">delete_char_range</a>(&amp;mut self, _ch_range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Deletes a range of text <code>char_range</code> from this buffer. <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#tymethod.delete_char_range\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.char_range\" class=\"method trait-impl\"><a href=\"#method.char_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#method.char_range\" class=\"fn\">char_range</a>(&amp;self, char_range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Reads the given character range.</div></details><section id=\"method.byte_index_from_char_index\" class=\"method trait-impl\"><a href=\"#method.byte_index_from_char_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#method.byte_index_from_char_index\" class=\"fn\">byte_index_from_char_index</a>(&amp;self, char_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clears all characters in this buffer</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method trait-impl\"><a href=\"#method.replace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#method.replace\" class=\"fn\">replace</a>(&amp;mut self, text: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Replaces all contents of this string with <code>text</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/egui/trait.TextBuffer.html#method.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Clears all characters in this buffer and returns a string of the contents.</div></details></div></details>","TextBuffer","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-%26str\" class=\"impl\"><a href=\"#impl-Arg-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Arg for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/enum.Cow.html\" title=\"enum jumpy::prelude::bones_utils::prelude::alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;<span class=\"where fmt-newline\">where\n    &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>: 'b,</span></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<span class=\"where fmt-newline\">where\n    &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;,</span></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-Url\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/url/2.5.0/src/url/lib.rs.html#2719\">source</a><a href=\"#impl-AsRef%3Cstr%3E-for-Url\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/url/2.5.0/url/struct.Url.html\" title=\"struct url::Url\">Url</a></h3></section></summary><div class=\"docblock\"><p>Return the serialization of this URL.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/url/2.5.0/src/url/lib.rs.html#2721\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-Url\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/url/2.5.0/src/url/lib.rs.html#2638\">source</a><a href=\"#impl-TryFrom%3C%26str%3E-for-Url\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/url/2.5.0/url/struct.Url.html\" title=\"struct url::Url\">Url</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://docs.rs/url/2.5.0/url/parser/enum.ParseError.html\" title=\"enum url::parser::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/url/2.5.0/src/url/lib.rs.html#2641\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://docs.rs/url/2.5.0/url/struct.Url.html\" title=\"struct url::Url\">Url</a>, &lt;<a class=\"struct\" href=\"https://docs.rs/url/2.5.0/url/struct.Url.html\" title=\"struct url::Url\">Url</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TextSource%3C'text%3E-for-str\" class=\"impl\"><a href=\"#impl-TextSource%3C'text%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'text&gt; TextSource&lt;'text&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Implementation of TextSource for UTF-8 text (a string slice).</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.CharIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CharIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">CharIter</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'text&gt;</h4></section><section id=\"associatedtype.CharIndexIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CharIndexIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">CharIndexIter</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.CharIndices.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::CharIndices\">CharIndices</a>&lt;'text&gt;</h4></section><section id=\"associatedtype.IndexLenIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IndexLenIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IndexLenIter</a> = Utf8IndexLenIter&lt;'text&gt;</h4></section></div></details>","TextSource<'text>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnicodeNormalization%3CChars%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-UnicodeNormalization%3CChars%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; UnicodeNormalization&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nfd\" class=\"method trait-impl\"><a href=\"#method.nfd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nfd</a>(self) -&gt; Decompositions&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nfkd\" class=\"method trait-impl\"><a href=\"#method.nfkd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nfkd</a>(self) -&gt; Decompositions&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nfc\" class=\"method trait-impl\"><a href=\"#method.nfc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nfc</a>(self) -&gt; Recompositions&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nfkc\" class=\"method trait-impl\"><a href=\"#method.nfkc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">nfkc</a>(self) -&gt; Recompositions&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cjk_compat_variants\" class=\"method trait-impl\"><a href=\"#method.cjk_compat_variants\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cjk_compat_variants</a>(self) -&gt; Replacements&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>A transformation which replaces CJK Compatibility Ideograph codepoints\nwith normal forms using Standardized Variation Sequences. This is not\npart of the canonical or compatibility decomposition algorithms, but\nperforming it before those algorithms produces normalized output which\nbetter preserves the intent of the original text. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_safe\" class=\"method trait-impl\"><a href=\"#method.stream_safe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">stream_safe</a>(self) -&gt; StreamSafe&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;&gt;</h4></section></summary><div class='docblock'>An Iterator over the string with Conjoining Grapheme Joiner characters\ninserted according to the Stream-Safe Text Process (UAX15-D4)</div></details></div></details>","UnicodeNormalization<Chars<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-FieldIdx%3C'a%3E\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-FieldIdx%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/bones_schema/ptr/enum.FieldIdx.html\" title=\"enum jumpy::prelude::bones_schema::ptr::FieldIdx\">FieldIdx</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/bones_schema/ptr/enum.FieldIdx.html\" title=\"enum jumpy::prelude::bones_schema::ptr::FieldIdx\">FieldIdx</a>&lt;'a&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-Ustr\" class=\"impl\"><a href=\"#impl-AsRef%3Cstr%3E-for-Ustr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Ustr\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-Ustr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUstr%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CUstr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a>&gt; for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a>) -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Ustr>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Ustr\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-Ustr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/struct.Ustr.html\" title=\"struct jumpy::prelude::Ustr\">Ustr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-AssetExtensions\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-AssetExtensions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/struct.AssetExtensions.html\" title=\"struct jumpy::prelude::AssetExtensions\">AssetExtensions</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/struct.AssetExtensions.html\" title=\"struct jumpy::prelude::AssetExtensions\">AssetExtensions</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-str\" class=\"impl\"><a href=\"#impl-Zeroize-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Zeroize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Box%3Cstr%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Zeroize for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/boxed/struct.Box.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeTarget-for-str\" class=\"impl\"><a href=\"#impl-EncodeTarget-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeTarget for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_with\" class=\"method trait-impl\"><a href=\"#method.encode_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_with</a>(\n    &amp;mut self,\n    max_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    f: impl for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'a mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Encodes into this buffer, provides the maximum length for implementations that wish to\npreallocate space, along with a function that will encode ASCII bytes into the buffer and\nreturn the length written to it.</div></details></div></details>","EncodeTarget","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-Index-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_yaml/0.9.34+deprecated/src/serde_yaml/value/index.rs.html#124\">source</a><a href=\"#impl-Index-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_yaml/0.9.34+deprecated/serde_yaml/value/index/trait.Index.html\" title=\"trait serde_yaml::value::index::Index\">Index</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","Index","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-Index-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_yaml/0.9.34+deprecated/src/serde_yaml/mapping.rs.html#311\">source</a><a href=\"#impl-Index-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_yaml/0.9.34+deprecated/serde_yaml/mapping/trait.Index.html\" title=\"trait serde_yaml::mapping::Index\">Index</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","Index","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-Index-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.115/src/serde_json/value/index.rs.html#83\">source</a><a href=\"#impl-Index-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_json/1.0.115/serde_json/value/index/trait.Index.html\" title=\"trait serde_json::value::index::Index\">Index</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","Index","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CValue%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.115/src/serde_json/value/partial_eq.rs.html#43\">source</a><a href=\"#impl-PartialEq%3CValue%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.115/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.115/src/serde_json/value/partial_eq.rs.html#44\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.115/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Value>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CValue%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.115/src/serde_json/value/partial_eq.rs.html#49\">source</a><a href=\"#impl-PartialEq%3CValue%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.115/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.115/src/serde_json/value/partial_eq.rs.html#50\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.115/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Value>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoValue%3C'gc%3E-for-%26str\" class=\"impl\"><a href=\"#impl-IntoValue%3C'gc%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'gc&gt; <a class=\"trait\" href=\"jumpy/prelude/piccolo/trait.IntoValue.html\" title=\"trait jumpy::prelude::piccolo::IntoValue\">IntoValue</a>&lt;'gc&gt; for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_value\" class=\"method trait-impl\"><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/piccolo/trait.IntoValue.html#tymethod.into_value\" class=\"fn\">into_value</a>(self, ctx: <a class=\"struct\" href=\"jumpy/prelude/piccolo/struct.Context.html\" title=\"struct jumpy::prelude::piccolo::Context\">Context</a>&lt;'gc&gt;) -&gt; <a class=\"enum\" href=\"jumpy/prelude/piccolo/enum.Value.html\" title=\"enum jumpy::prelude::piccolo::Value\">Value</a>&lt;'gc&gt;</h4></section></div></details>","IntoValue<'gc>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Collect-for-str\" class=\"impl\"><a href=\"#impl-Collect-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Collect for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>: 'static,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.needs_trace\" class=\"method trait-impl\"><a href=\"#method.needs_trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">needs_trace</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>As an optimization, if this type can never hold a <code>Gc</code> pointer and <code>trace</code> is unnecessary\nto call, you may implement this method and return false. The default implementation returns\ntrue, signaling that <code>Collect::trace</code> must be called.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace\" class=\"method trait-impl\"><a href=\"#method.trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trace</a>(&amp;self, _cc: &amp;Collection)</h4></section></summary><div class='docblock'><em>Must</em> call <code>Collect::trace</code> on all held <code>Gc</code> pointers. If this type holds inner types that\nimplement <code>Collect</code>, a valid implementation would simply call <code>Collect::trace</code> on all the\nheld values to ensure this.</div></details></div></details>","Collect","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-ToSocketAddrs-for-str\" class=\"impl\"><a href=\"#impl-ToSocketAddrs-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToSocketAddrs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","ToSocketAddrs","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytes%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Bytes&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytes%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Bytes&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytesMut%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytesMut%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BytesMut&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<BytesMut>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytesMut%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytesMut%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BytesMut&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<BytesMut>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytes%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Bytes&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytes%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Bytes&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytesMut%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytesMut%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BytesMut&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BytesMut>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytesMut%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytesMut%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BytesMut&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BytesMut>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RangeSetEntry-for-%26str\" class=\"impl\"><a href=\"#impl-RangeSetEntry-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RangeSetEntry for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min_value</a>() -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>the minimum value for this type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_min_value\" class=\"method trait-impl\"><a href=\"#method.is_min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_min_value</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>checks if this is the minimum value <a>Read more</a></div></details></div></details>","RangeSetEntry","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Schema-for-str\" class=\"impl\"><a href=\"#impl-Schema-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Schema for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.SCHEMA\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.SCHEMA\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">SCHEMA</a>: &amp;'static NamedType = _</h4></section></summary><div class='docblock'>A recursive data structure that describes the schema of the given\ntype.</div></details></div></details>","Schema","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3CN%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CString%3CN%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;String&lt;N&gt;&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;String&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;String&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String<N>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CString%3CN%3E%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CString%3CN%3E%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;String&lt;N&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;String&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;String&lt;N&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<String<N>>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-str\" class=\"impl\"><a href=\"#impl-Hash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Hash for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: Hasher,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <code>Hasher</code>.</div></details></div></details>","Hash","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-%26str\" class=\"impl\"><a href=\"#impl-Encode-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Encode a <code>string</code> as described in <a href=\"https://datatracker.ietf.org/doc/html/rfc4251#section-5\">RFC4251 § 5</a>:</p>\n<blockquote>\n<p>Arbitrary length binary string.  Strings are allowed to contain\narbitrary binary data, including null characters and 8-bit\ncharacters.  They are stored as a uint32 containing its length\n(number of bytes that follow) and zero (= empty string) or more\nbytes that are the value of the string.  Terminating null\ncharacters are not used.</p>\n<p>Strings are also used to store text.  In that case, US-ASCII is\nused for internal names, and ISO-10646 UTF-8 for text that might\nbe displayed to the user.  The terminating null character SHOULD\nNOT normally be stored in the string.  For example: the US-ASCII\nstring “testing” is represented as 00 00 00 07 t e s t i n g.  The\nUTF-8 mapping does not alter the encoding of US-ASCII characters.</p>\n</blockquote>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Get the length of this type encoded in bytes, prior to Base64 encoding.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode this value using the provided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len_prefixed\" class=\"method trait-impl\"><a href=\"#method.encoded_len_prefixed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len_prefixed</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Return the length of this type after encoding when prepended with a\n<code>uint32</code> length prefix.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_prefixed\" class=\"method trait-impl\"><a href=\"#method.encode_prefixed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_prefixed</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode this value, first prepending a <code>uint32</code> length prefix\nset to [<code>Encode::encoded_len</code>].</div></details></div></details>","Encode","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-Name%3C'a%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26str%3E-for-Name%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for Name&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = SimpleDnsError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Name&lt;'a&gt;, &lt;Name&lt;'a&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26str%3E-for-CharacterString%3C'a%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26str%3E-for-CharacterString%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for CharacterString&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = SimpleDnsError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;CharacterString&lt;'a&gt;, &lt;CharacterString&lt;'a&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-IntoUrl-for-%26str\" class=\"impl\"><a href=\"#impl-IntoUrl-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; IntoUrl for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","IntoUrl","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CHeaderValue%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#766\">source</a><a href=\"#impl-PartialOrd%3CHeaderValue%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#768\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPathAndQuery%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#432\">source</a><a href=\"#impl-PartialOrd%3CPathAndQuery%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#434\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CHeaderValue%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#683\">source</a><a href=\"#impl-PartialOrd%3CHeaderValue%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#685\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CAuthority%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#363\">source</a><a href=\"#impl-PartialOrd%3CAuthority%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#364\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Authority>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CAuthority%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#355\">source</a><a href=\"#impl-PartialOrd%3CAuthority%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#356\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Authority>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPathAndQuery%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#418\">source</a><a href=\"#impl-PartialOrd%3CPathAndQuery%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#420\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathAndQuery%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#369\">source</a><a href=\"#impl-PartialEq%3CPathAndQuery%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#371\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderName%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1485\">source</a><a href=\"#impl-PartialEq%3CHeaderName%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1489\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Performs a case-insensitive comparison of the string against the header\nname</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderName>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderName%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1457\">source</a><a href=\"#impl-PartialEq%3CHeaderName%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1471\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Performs a case-insensitive comparison of the string against the header\nname</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>http::header::CONTENT_LENGTH;\n\n<span class=\"macro\">assert_eq!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;content-length&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;Content-Length&quot;</span>);\n<span class=\"macro\">assert_ne!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;content length&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderName>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderValue%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#669\">source</a><a href=\"#impl-PartialEq%3CHeaderValue%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#671\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CMethod%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/method.rs.html#230\">source</a><a href=\"#impl-PartialEq%3CMethod%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/method/struct.Method.html\" title=\"struct http::method::Method\">Method</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/method.rs.html#232\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/method/struct.Method.html\" title=\"struct http::method::Method\">Method</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Method>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CAuthority%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#299\">source</a><a href=\"#impl-PartialEq%3CAuthority%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#300\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Authority>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUri%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/mod.rs.html#993\">source</a><a href=\"#impl-PartialEq%3CUri%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/struct.Uri.html\" title=\"struct http::uri::Uri\">Uri</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/mod.rs.html#994\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, uri: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/struct.Uri.html\" title=\"struct http::uri::Uri\">Uri</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Uri>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathAndQuery%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#383\">source</a><a href=\"#impl-PartialEq%3CPathAndQuery%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/path.rs.html#385\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/path/struct.PathAndQuery.html\" title=\"struct http::uri::path::PathAndQuery\">PathAndQuery</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderValue%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#759\">source</a><a href=\"#impl-PartialEq%3CHeaderValue%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/value.rs.html#761\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/value/struct.HeaderValue.html\" title=\"struct http::header::value::HeaderValue\">HeaderValue</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CAuthority%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#305\">source</a><a href=\"#impl-PartialEq%3CAuthority%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/authority.rs.html#306\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/authority/struct.Authority.html\" title=\"struct http::uri::authority::Authority\">Authority</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Authority>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CMethod%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/method.rs.html#216\">source</a><a href=\"#impl-PartialEq%3CMethod%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/method/struct.Method.html\" title=\"struct http::method::Method\">Method</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/method.rs.html#218\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/method/struct.Method.html\" title=\"struct http::method::Method\">Method</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Method>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUri%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/mod.rs.html#1005\">source</a><a href=\"#impl-PartialEq%3CUri%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/struct.Uri.html\" title=\"struct http::uri::Uri\">Uri</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/mod.rs.html#1006\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, uri: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/struct.Uri.html\" title=\"struct http::uri::Uri\">Uri</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Uri>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScheme%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/scheme.rs.html#160\">source</a><a href=\"#impl-PartialEq%3CScheme%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/scheme/struct.Scheme.html\" title=\"struct http::uri::scheme::Scheme\">Scheme</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Case-insensitive equality</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/uri/scheme.rs.html#161\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/uri/scheme/struct.Scheme.html\" title=\"struct http::uri::scheme::Scheme\">Scheme</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Scheme>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-AsHeaderName-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/map.rs.html#3844\">source</a><a href=\"#impl-AsHeaderName-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/http/0.2.11/http/header/map/as_header_name/trait.AsHeaderName.html\" title=\"trait http::header::map::as_header_name::AsHeaderName\">AsHeaderName</a> for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","AsHeaderName","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-IntoHeaderName-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/map.rs.html#3740\">source</a><a href=\"#impl-IntoHeaderName-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/http/0.2.11/http/header/map/into_header_name/trait.IntoHeaderName.html\" title=\"trait http::header::map::into_header_name::IntoHeaderName\">IntoHeaderName</a> for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","IntoHeaderName","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-HeaderName\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1314\">source</a><a href=\"#impl-Borrow%3Cstr%3E-for-HeaderName\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/http/0.2.11/http/header/name/struct.HeaderName.html\" title=\"struct http::header::name::HeaderName\">HeaderName</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/http/0.2.11/src/http/header/name.rs.html#1315\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;DnsNameRef&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_: DnsNameRef&lt;'a&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<DnsNameRef<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIpAddrRef%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CIpAddrRef%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;IpAddrRef&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(ip_address: IpAddrRef&lt;'a&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<IpAddrRef<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CWildcardDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CWildcardDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;WildcardDnsNameRef&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_: WildcardDnsNameRef&lt;'a&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<WildcardDnsNameRef<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CGeneralDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CGeneralDnsNameRef%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;GeneralDnsNameRef&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(d: GeneralDnsNameRef&lt;'a&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<GeneralDnsNameRef<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CName%3C'a%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#496\">source</a><a href=\"#impl-From%3CName%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Name.html\" title=\"struct mime::Name\">Name</a>&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#498\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(name: <a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Name.html\" title=\"struct mime::Name\">Name</a>&lt;'a&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Name<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CMime%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#418\">source</a><a href=\"#impl-PartialEq%3CMime%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Mime.html\" title=\"struct mime::Mime\">Mime</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#420\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, mime: &amp;<a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Mime.html\" title=\"struct mime::Mime\">Mime</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Mime>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CName%3C'a%3E%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#482\">source</a><a href=\"#impl-PartialEq%3CName%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Name.html\" title=\"struct mime::Name\">Name</a>&lt;'a&gt;&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/mime/0.3.17/src/mime/lib.rs.html#484\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/mime/0.3.17/mime/struct.Name.html\" title=\"struct mime::Name\">Name</a>&lt;'a&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Name<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryParseIp-for-str\" class=\"impl\"><a href=\"#impl-TryParseIp-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TryParseIp for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_parse_ip\" class=\"method trait-impl\"><a href=\"#method.try_parse_ip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_parse_ip</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RData&gt;</h4></section></summary><div class='docblock'>Attempts to parse self into an RData::A or RData::AAAA, None is returned if not possible</div></details></div></details>","TryParseIp","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoName-for-%26str\" class=\"impl\"><a href=\"#impl-IntoName-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; IntoName for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_name\" class=\"method trait-impl\"><a href=\"#method.into_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_name</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Name, ProtoError&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a utf8, IDNA or punycode, translation of the <code>str</code> into <code>Name</code></p>\n</div></details></div></details>","IntoName","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoLabel-for-%26str\" class=\"impl\"><a href=\"#impl-IntoLabel-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; IntoLabel for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_label\" class=\"method trait-impl\"><a href=\"#method.into_label\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_label</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Label, ProtoError&gt;</h4></section></summary><div class='docblock'>Convert this into Label</div></details></div></details>","IntoLabel","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CRecordType%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CRecordType%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;RecordType&gt; for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Convert from <code>RecordType</code> to <code>&amp;str</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hickory_proto::rr::record_type::RecordType;\n\n<span class=\"kw\">let </span>var: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span>str = From::from(RecordType::A);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;A&quot;</span>, var);\n\n<span class=\"kw\">let </span>var: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span>str = RecordType::A.into();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;A&quot;</span>, var);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(rt: RecordType) -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<RecordType>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDNSClass%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3CDNSClass%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;DNSClass&gt; for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Convert from <code>DNSClass</code> to <code>&amp;str</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>hickory_proto::rr::dns_class::DNSClass;\n\n<span class=\"kw\">let </span>var: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">&#39;static </span>str = DNSClass::IN.into();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">&quot;IN&quot;</span>, var);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(rt: DNSClass) -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<DNSClass>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeLabelValue-for-%26str\" class=\"impl\"><a href=\"#impl-EncodeLabelValue-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeLabelValue for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self, encoder: &amp;mut LabelValueEncoder&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode oneself into the given encoder.</div></details></div></details>","EncodeLabelValue","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeLabelKey-for-%26str\" class=\"impl\"><a href=\"#impl-EncodeLabelKey-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeLabelKey for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self, encoder: &amp;mut LabelKeyEncoder&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode oneself into the given encoder.</div></details></div></details>","EncodeLabelKey","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-WriteBuffer%3CSIZE%3E\" class=\"impl\"><a href=\"#impl-Borrow%3Cstr%3E-for-WriteBuffer%3CSIZE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for WriteBuffer&lt;SIZE&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmartDisplay-for-str\" class=\"impl\"><a href=\"#impl-SmartDisplay-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SmartDisplay for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Metadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Metadata</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>User-provided metadata type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(&amp;self, f: FormatterOptions) -&gt; Metadata&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Compute any information needed to format the value. This must, at a minimum, determine the\nwidth of the value before any padding is added by the formatter. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format the value using the given formatter. This is the same as <a href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html#tymethod.fmt\" title=\"method jumpy::prelude::bones_utils::prelude::alloc::fmt::Display::fmt\"><code>Display::fmt</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_with_metadata\" class=\"method trait-impl\"><a href=\"#method.fmt_with_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt_with_metadata</a>(\n    &amp;self,\n    f: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;,\n    _metadata: Metadata&lt;'_, Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format the value using the given formatter and metadata. The formatted output should have\nthe width indicated by the metadata. This is before any padding is added by the\nformatter. <a>Read more</a></div></details></div></details>","SmartDisplay","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CHeaderValue%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CHeaderValue%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;HeaderValue&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;HeaderValue) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CHeaderValue%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CHeaderValue%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;HeaderValue&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;HeaderValue) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CAuthority%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CAuthority%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Authority&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Authority) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Authority>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPathAndQuery%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CPathAndQuery%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;PathAndQuery&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;PathAndQuery) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CPathAndQuery%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CPathAndQuery%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;PathAndQuery&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;PathAndQuery) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CAuthority%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialOrd%3CAuthority%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Authority&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Authority) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Authority>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CMethod%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CMethod%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Method&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Method) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Method>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderValue%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CHeaderValue%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HeaderValue&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HeaderValue) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScheme%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CScheme%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Scheme&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Case-insensitive equality</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Scheme) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Scheme>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUri%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CUri%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Uri&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, uri: &amp;Uri) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Uri>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathAndQuery%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CPathAndQuery%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;PathAndQuery&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;PathAndQuery) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderValue%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CHeaderValue%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HeaderValue&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HeaderValue) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderValue>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CAuthority%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CAuthority%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Authority&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Authority) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Authority>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderName%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CHeaderName%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HeaderName&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HeaderName) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Performs a case-insensitive comparison of the string against the header\nname</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>http::header::CONTENT_LENGTH;\n\n<span class=\"macro\">assert_eq!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;content-length&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;Content-Length&quot;</span>);\n<span class=\"macro\">assert_ne!</span>(CONTENT_LENGTH, <span class=\"string\">&quot;content length&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderName>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUri%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CUri%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Uri&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, uri: &amp;Uri) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Uri>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CHeaderName%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CHeaderName%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;HeaderName&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;HeaderName) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Performs a case-insensitive comparison of the string against the header\nname</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<HeaderName>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CAuthority%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CAuthority%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Authority&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Authority) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Authority>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CMethod%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CMethod%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Method&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Method) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Method>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathAndQuery%3E-for-str\" class=\"impl\"><a href=\"#impl-PartialEq%3CPathAndQuery%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;PathAndQuery&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;PathAndQuery) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathAndQuery>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-AsHeaderName-for-%26str\" class=\"impl\"><a href=\"#impl-AsHeaderName-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; AsHeaderName for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","AsHeaderName","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-HeaderName\" class=\"impl\"><a href=\"#impl-Borrow%3Cstr%3E-for-HeaderName\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for HeaderName</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"jumpy/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-IntoHeaderName-for-%26str\" class=\"impl\"><a href=\"#impl-IntoHeaderName-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoHeaderName for &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","IntoHeaderName","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CUserName%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CUserName%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;UserName&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;UserName) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<UserName>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRealm%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CRealm%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Realm&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Realm) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Realm>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CNonce%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CNonce%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Nonce&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Nonce) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Nonce>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CSoftware%3E-for-%26str\" class=\"impl\"><a href=\"#impl-PartialEq%3CSoftware%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Software&gt; for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Software) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Software>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NixPath-for-str\" class=\"impl\"><a href=\"#impl-NixPath-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NixPath for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the path empty?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Length of the path in bytes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_nix_path\" class=\"method trait-impl\"><a href=\"#method.with_nix_path\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_nix_path</a>&lt;T, F&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; T,</span></h4></section></summary><div class='docblock'>Execute a function with this path as a <code>CStr</code>. <a>Read more</a></div></details></div></details>","NixPath","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ElementPredicate-for-%26str\" class=\"impl\"><a href=\"#impl-ElementPredicate-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ElementPredicate for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.match_element\" class=\"method trait-impl\"><a href=\"#method.match_element\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">match_element</a>(&amp;self, e: &amp;Element) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Search by tag name</p>\n</div></details></div></details>","ElementPredicate","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DEREncodable-for-str\" class=\"impl\"><a href=\"#impl-DEREncodable-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DEREncodable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_der\" class=\"method trait-impl\"><a href=\"#method.encode_der\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_der</a>(&amp;self, writer: DERWriter&lt;'_&gt;)</h4></section></summary><div class='docblock'>Writes the value as an DER-encoded ASN.1 value. <a>Read more</a></div></details></div></details>","DEREncodable","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26AttributeTypeAndValue%3C'b%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26AttributeTypeAndValue%3C'b%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a AttributeTypeAndValue&lt;'b&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = X509Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a AttributeTypeAndValue&lt;'b&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a AttributeTypeAndValue&lt;'b&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a AttributeTypeAndValue<'b>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToDer-for-%26str\" class=\"impl\"><a href=\"#impl-ToDer-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ToDer for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_len\" class=\"method trait-impl\"><a href=\"#method.to_der_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Get the length of the object (including the header), when encoded</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_header\" class=\"method trait-impl\"><a href=\"#method.write_der_header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_header</a>(\n    &amp;self,\n    writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER header to this writer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_content\" class=\"method trait-impl\"><a href=\"#method.write_der_content\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_content</a>(\n    &amp;self,\n    writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER content (all except header) to this writer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_vec\" class=\"method trait-impl\"><a href=\"#method.to_der_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_vec</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;, SerializeError&gt;</h4></section></summary><div class='docblock'>Write the DER encoded representation to a newly allocated <code>Vec&lt;u8&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_vec_raw\" class=\"method trait-impl\"><a href=\"#method.to_der_vec_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_vec_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;, SerializeError&gt;</h4></section></summary><div class='docblock'>Similar to using <code>to_vec</code>, but uses provided values without changes.\nThis can generate an invalid encoding for a DER object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der\" class=\"method trait-impl\"><a href=\"#method.write_der\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der</a>(&amp;self, writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER encoded representation (header and content) into this writer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_raw\" class=\"method trait-impl\"><a href=\"#method.write_der_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_raw</a>(&amp;self, writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Similar to using <code>to_der</code>, but uses provided values without changes.\nThis can generate an invalid encoding for a DER object.</div></details></div></details>","ToDer","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-DerAutoDerive-for-%26str\" class=\"impl\"><a href=\"#impl-DerAutoDerive-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DerAutoDerive for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","DerAutoDerive","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckDerConstraints-for-%26str\" class=\"impl\"><a href=\"#impl-CheckDerConstraints-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; CheckDerConstraints for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.check_constraints\" class=\"method trait-impl\"><a href=\"#method.check_constraints\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">check_constraints</a>(any: &amp;Any&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></div></details>","CheckDerConstraints","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAny%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3CAny%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Any&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: Any&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Any<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26Any%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26Any%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'b Any&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: &amp;'b Any&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'b Any<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tagged-for-%26str\" class=\"impl\"><a href=\"#impl-Tagged-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Tagged for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Utf8String</h4></section></div></details>","Tagged","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3C%26str%3E-for-%26%5Bu8%5D\" class=\"impl\"><a href=\"#impl-Compare%3C%26str%3E-for-%26%5Bu8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; Compare&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare_no_case</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a>Read more</a></div></details></div></details>","Compare<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3C%26%5Bu8%5D%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Compare%3C%26%5Bu8%5D%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; Compare&lt;&amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare</a>(&amp;self, t: &amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare_no_case</a>(&amp;self, t: &amp;'b [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a>Read more</a></div></details></div></details>","Compare<&'b [u8]>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3C%26str%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Compare%3C%26str%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; Compare&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compare_no_case</a>(&amp;self, t: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; CompareResult</h4></section></summary><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a>Read more</a></div></details></div></details>","Compare<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3CRangeFull%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Slice%3CRangeFull%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Slice&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method trait-impl\"><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Slices self according to the range argument</div></details></div></details>","Slice<RangeFull>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3CRange%3Cusize%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Slice%3CRange%3Cusize%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Slice&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method trait-impl\"><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Slices self according to the range argument</div></details></div></details>","Slice<Range<usize>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3CRangeTo%3Cusize%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Slice%3CRangeTo%3Cusize%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Slice&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method trait-impl\"><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Slices self according to the range argument</div></details></div></details>","Slice<RangeTo<usize>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3CRangeFrom%3Cusize%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Slice%3CRangeFrom%3Cusize%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Slice&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method trait-impl\"><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Slices self according to the range argument</div></details></div></details>","Slice<RangeFrom<usize>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseTo%3CR%3E-for-%26str\" class=\"impl\"><a href=\"#impl-ParseTo%3CR%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R&gt; ParseTo&lt;R&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a><span class=\"where fmt-newline\">where\n    R: <a class=\"trait\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/trait.FromStr.html\" title=\"trait jumpy::prelude::bones_utils::prelude::alloc::str::FromStr\">FromStr</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_to\" class=\"method trait-impl\"><a href=\"#method.parse_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_to</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;</h4></section></summary><div class='docblock'>Succeeds if <code>parse()</code> succeeded. The byte slice implementation\nwill first convert it to a <code>&amp;str</code>, then apply the <code>parse()</code> function</div></details></div></details>","ParseTo<R>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSubstring%3C%26str%3E-for-%26%5Bu8%5D\" class=\"impl\"><a href=\"#impl-FindSubstring%3C%26str%3E-for-%26%5Bu8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; FindSubstring&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_substring\" class=\"method trait-impl\"><a href=\"#method.find_substring\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_substring</a>(&amp;self, substr: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the byte position of the substring if it is found</div></details></div></details>","FindSubstring<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSubstring%3C%26str%3E-for-%26str\" class=\"impl\"><a href=\"#impl-FindSubstring%3C%26str%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; FindSubstring&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_substring\" class=\"method trait-impl\"><a href=\"#method.find_substring\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_substring</a>(&amp;self, substr: &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the byte position of the substring if it is found</div></details></div></details>","FindSubstring<&'b str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputTakeAtPosition-for-%26str\" class=\"impl\"><a href=\"#impl-InputTakeAtPosition-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; InputTakeAtPosition for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position\" class=\"method trait-impl\"><a href=\"#method.split_at_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">split_at_position</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>), Err&lt;E&gt;&gt;<span class=\"where fmt-newline\">where\n    E: ParseError&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputTakeAtPosition&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true,\nand returns the input up to this position. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position1\" class=\"method trait-impl\"><a href=\"#method.split_at_position1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">split_at_position1</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P,\n    e: ErrorKind\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>), Err&lt;E&gt;&gt;<span class=\"where fmt-newline\">where\n    E: ParseError&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputTakeAtPosition&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true\nand returns the input up to this position. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position_complete\" class=\"method trait-impl\"><a href=\"#method.split_at_position_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">split_at_position_complete</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>), Err&lt;E&gt;&gt;<span class=\"where fmt-newline\">where\n    E: ParseError&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputTakeAtPosition&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true,\nand returns the input up to this position. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position1_complete\" class=\"method trait-impl\"><a href=\"#method.split_at_position1_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">split_at_position1_complete</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P,\n    e: ErrorKind\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>), Err&lt;E&gt;&gt;<span class=\"where fmt-newline\">where\n    E: ParseError&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputTakeAtPosition&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true\nand returns the input up to this position. <a>Read more</a></div></details></div></details>","InputTakeAtPosition","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExtendInto-for-%26str\" class=\"impl\"><a href=\"#impl-ExtendInto-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ExtendInto for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Extender\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Extender\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Extender</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The type that will be produced</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_builder\" class=\"method trait-impl\"><a href=\"#method.new_builder\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_builder</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_into\" class=\"method trait-impl\"><a href=\"#method.extend_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_into</a>(&amp;self, acc: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","ExtendInto","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExtendInto-for-str\" class=\"impl\"><a href=\"#impl-ExtendInto-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ExtendInto for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Extender\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Extender\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Extender</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The type that will be produced</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_builder\" class=\"method trait-impl\"><a href=\"#method.new_builder\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_builder</a>(&amp;self) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_into\" class=\"method trait-impl\"><a href=\"#method.extend_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_into</a>(&amp;self, acc: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a>)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","ExtendInto","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindToken%3Cchar%3E-for-%26str\" class=\"impl\"><a href=\"#impl-FindToken%3Cchar%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; FindToken&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_token\" class=\"method trait-impl\"><a href=\"#method.find_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_token</a>(&amp;self, token: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if self contains the token</div></details></div></details>","FindToken<char>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindToken%3Cu8%3E-for-%26str\" class=\"impl\"><a href=\"#impl-FindToken%3Cu8%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; FindToken&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_token\" class=\"method trait-impl\"><a href=\"#method.find_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_token</a>(&amp;self, token: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if self contains the token</div></details></div></details>","FindToken<u8>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindToken%3C%26u8%3E-for-%26str\" class=\"impl\"><a href=\"#impl-FindToken%3C%26u8%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; FindToken&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt; for &amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_token\" class=\"method trait-impl\"><a href=\"#method.find_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">find_token</a>(&amp;self, token: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if self contains the token</div></details></div></details>","FindToken<&'a u8>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-%26str\" class=\"impl\"><a href=\"#impl-AsBytes-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; AsBytes for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Casts the input type to a byte slice</div></details></div></details>","AsBytes","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-str\" class=\"impl\"><a href=\"#impl-AsBytes-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Casts the input type to a byte slice</div></details></div></details>","AsBytes","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputTake-for-%26str\" class=\"impl\"><a href=\"#impl-InputTake-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; InputTake for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Returns a slice of <code>count</code> bytes. panics if count &gt; length</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_split\" class=\"method trait-impl\"><a href=\"#method.take_split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">take_split</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; (&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Split the stream at the <code>count</code> byte offset. panics if count &gt; length</div></details></div></details>","InputTake","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputIter-for-%26str\" class=\"impl\"><a href=\"#impl-InputIter-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; InputIter for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.CharIndices.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::CharIndices\">CharIndices</a>&lt;'a&gt;</h4></section></summary><div class='docblock'>An iterator over the input type, producing the item and its position\nfor use with [Slice]. If we’re iterating over <code>&amp;str</code>, the position\ncorresponds to the byte index of the character</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IterElem\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IterElem\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IterElem</a> = <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/str/struct.Chars.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::str::Chars\">Chars</a>&lt;'a&gt;</h4></section></summary><div class='docblock'>An iterator over the input type, producing the item</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_indices\" class=\"method trait-impl\"><a href=\"#method.iter_indices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_indices</a>(&amp;self) -&gt; &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputIter&gt;::Iter</h4></section></summary><div class='docblock'>Returns an iterator over the elements and their byte offsets</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_elements\" class=\"method trait-impl\"><a href=\"#method.iter_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_elements</a>(&amp;self) -&gt; &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputIter&gt;::IterElem</h4></section></summary><div class='docblock'>Returns an iterator over the elements</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position\" class=\"method trait-impl\"><a href=\"#method.position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">position</a>&lt;P&gt;(&amp;self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as InputIter&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>,</span></h4></section></summary><div class='docblock'>Finds the byte position of the element</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_index\" class=\"method trait-impl\"><a href=\"#method.slice_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice_index</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Needed&gt;</h4></section></summary><div class='docblock'>Get the byte offset from the element’s position in the stream</div></details></div></details>","InputIter","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-%26str\" class=\"impl\"><a href=\"#impl-Offset-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Offset for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(&amp;self, second: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of self and the first byte of the argument</div></details></div></details>","Offset","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-str\" class=\"impl\"><a href=\"#impl-Offset-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Offset for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">offset</a>(&amp;self, second: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of self and the first byte of the argument</div></details></div></details>","Offset","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputLength-for-%26str\" class=\"impl\"><a href=\"#impl-InputLength-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; InputLength for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.input_len\" class=\"method trait-impl\"><a href=\"#method.input_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">input_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the input length, as indicated by its name,\nand the name of the trait itself</div></details></div></details>","InputLength","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HexDisplay-for-str\" class=\"impl\"><a href=\"#impl-HexDisplay-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl HexDisplay for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hex\" class=\"method trait-impl\"><a href=\"#method.to_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_hex</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a hex dump, returning the owned\n<code>String</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hex_from\" class=\"method trait-impl\"><a href=\"#method.to_hex_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_hex_from</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, from: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a hex dump beginning at <code>from</code> address, returning the owned\n<code>String</code>.</div></details></div></details>","HexDisplay","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-str\" class=\"impl\"><a href=\"#impl-EncodeValue-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details></div></details>","EncodeValue","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAnyRef%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3CAnyRef%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;AnyRef&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: AnyRef&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<AnyRef<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-str\" class=\"impl\"><a href=\"#impl-FixedTag-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FixedTag for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Utf8String</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26AttributeTypeAndValue%3C'b%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26AttributeTypeAndValue%3C'b%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a AttributeTypeAndValue&lt;'b&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = X509Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;'a AttributeTypeAndValue&lt;'b&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a AttributeTypeAndValue&lt;'b&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a AttributeTypeAndValue<'b>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToDer-for-%26str\" class=\"impl\"><a href=\"#impl-ToDer-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ToDer for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_len\" class=\"method trait-impl\"><a href=\"#method.to_der_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Get the length of the object (including the header), when encoded</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_header\" class=\"method trait-impl\"><a href=\"#method.write_der_header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_header</a>(\n    &amp;self,\n    writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER header to this writer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_content\" class=\"method trait-impl\"><a href=\"#method.write_der_content\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_content</a>(\n    &amp;self,\n    writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER content (all except header) to this writer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_vec\" class=\"method trait-impl\"><a href=\"#method.to_der_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_vec</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;, SerializeError&gt;</h4></section></summary><div class='docblock'>Write the DER encoded representation to a newly allocated <code>Vec&lt;u8&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der_vec_raw\" class=\"method trait-impl\"><a href=\"#method.to_der_vec_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_der_vec_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/vec/struct.Vec.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;, SerializeError&gt;</h4></section></summary><div class='docblock'>Similar to using <code>to_vec</code>, but uses provided values without changes.\nThis can generate an invalid encoding for a DER object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der\" class=\"method trait-impl\"><a href=\"#method.write_der\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der</a>(&amp;self, writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Attempt to write the DER encoded representation (header and content) into this writer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_der_raw\" class=\"method trait-impl\"><a href=\"#method.write_der_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_der_raw</a>(&amp;self, writer: &amp;mut dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, SerializeError&gt;</h4></section></summary><div class='docblock'>Similar to using <code>to_der</code>, but uses provided values without changes.\nThis can generate an invalid encoding for a DER object.</div></details></div></details>","ToDer","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<section id=\"impl-DerAutoDerive-for-%26str\" class=\"impl\"><a href=\"#impl-DerAutoDerive-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DerAutoDerive for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section>","DerAutoDerive","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckDerConstraints-for-%26str\" class=\"impl\"><a href=\"#impl-CheckDerConstraints-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; CheckDerConstraints for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.check_constraints\" class=\"method trait-impl\"><a href=\"#method.check_constraints\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">check_constraints</a>(any: &amp;Any&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></div></details>","CheckDerConstraints","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAny%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3CAny%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Any&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: Any&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Any<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26Any%3C'a%3E%3E-for-%26str\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26Any%3C'a%3E%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'b Any&lt;'a&gt;&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: &amp;'b Any&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'b Any<'a>>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tagged-for-%26str\" class=\"impl\"><a href=\"#impl-Tagged-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Tagged for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Utf8String</h4></section></div></details>","Tagged","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsIpAddrs-for-%26str\" class=\"impl\"><a href=\"#impl-AsIpAddrs-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsIpAddrs for &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"docblock\"><p>Supports one address or multiple addresses separated by <code>,</code>.\nFor example: “127.0.0.1,127.0.0.2”.</p>\n<p>If the string is empty, will return an empty set.</p>\n</div><div class=\"impl-items\"><section id=\"method.as_ip_addrs\" class=\"method trait-impl\"><a href=\"#method.as_ip_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ip_addrs</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/std/collections/hash/set/struct.HashSet.html\" title=\"struct std::collections::hash::set::HashSet\">HashSet</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/net/ip_addr/enum.IpAddr.html\" title=\"enum core::net::ip_addr::IpAddr\">IpAddr</a>&gt;, Error&gt;</h4></section></div></details>","AsIpAddrs","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-FluentNumberStyle\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-FluentNumberStyle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/fluent/types/enum.FluentNumberStyle.html\" title=\"enum jumpy::prelude::fluent::types::FluentNumberStyle\">FluentNumberStyle</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/fluent/types/enum.FluentNumberStyle.html\" title=\"enum jumpy::prelude::fluent::types::FluentNumberStyle\">FluentNumberStyle</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-FluentNumberCurrencyDisplayStyle\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-FluentNumberCurrencyDisplayStyle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/fluent/types/enum.FluentNumberCurrencyDisplayStyle.html\" title=\"enum jumpy::prelude::fluent::types::FluentNumberCurrencyDisplayStyle\">FluentNumberCurrencyDisplayStyle</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/fluent/types/enum.FluentNumberCurrencyDisplayStyle.html\" title=\"enum jumpy::prelude::fluent::types::FluentNumberCurrencyDisplayStyle\">FluentNumberCurrencyDisplayStyle</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-FluentValue%3C'source%3E\" class=\"impl\"><a href=\"#impl-From%3C%26str%3E-for-FluentValue%3C'source%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'source&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'source <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"enum\" href=\"jumpy/prelude/fluent/enum.FluentValue.html\" title=\"enum jumpy::prelude::fluent::FluentValue\">FluentValue</a>&lt;'source&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'source <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"jumpy/prelude/fluent/enum.FluentValue.html\" title=\"enum jumpy::prelude::fluent::FluentValue\">FluentValue</a>&lt;'source&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'source str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3C's%3E-for-%26str\" class=\"impl\"><a href=\"#impl-Slice%3C's%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'s&gt; Slice&lt;'s&gt; for &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.slice\" class=\"method trait-impl\"><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">slice</a>(&amp;self, range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>&gt;) -&gt; &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section><section id=\"method.trim\" class=\"method trait-impl\"><a href=\"#method.trim\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trim</a>(&amp;mut self)</h4></section></div></details>","Slice<'s>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Region%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3C%26Region%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'l&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'l <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Region.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Region\">Region</a>&gt; for &amp;'l <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(input: &amp;'l <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Region.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Region\">Region</a>) -&gt; &amp;'l <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'l Region>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Script%3E-for-%26str\" class=\"impl\"><a href=\"#impl-From%3C%26Script%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'l&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'l <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Script.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Script\">Script</a>&gt; for &amp;'l <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(input: &amp;'l <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Script.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Script\">Script</a>) -&gt; &amp;'l <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'l Script>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-Variant\" class=\"impl\"><a href=\"#impl-PartialEq%3Cstr%3E-for-Variant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Variant.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Variant\">Variant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Region\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-Region\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Region.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Region\">Region</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-LanguageIdentifier\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-LanguageIdentifier\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/struct.LanguageIdentifier.html\" title=\"struct jumpy::prelude::unic_langid::LanguageIdentifier\">LanguageIdentifier</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Variant\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-Variant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Variant.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Variant\">Variant</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Script\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-Script\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Script.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Script\">Script</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-Language\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26str%3E-for-Language\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/unic_langid/subtags/struct.Language.html\" title=\"struct jumpy::prelude::unic_langid::subtags::Language\">Language</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3Cstr%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#192\">source</a><a href=\"#impl-PhfBorrow%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/string/struct.String.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#193\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3Cstr%3E-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#172-189\">source</a><a href=\"#impl-PhfBorrow%3Cstr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#172-189\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<str>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3Cstr%3E-for-%26str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#236\">source</a><a href=\"#impl-PhfBorrow%3Cstr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt; for &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#237\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<str>","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfHash-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#248\">source</a><a href=\"#impl-PhfHash-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html\" title=\"trait phf_shared::PhfHash\">PhfHash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#250\">source</a><a href=\"#method.phf_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html#tymethod.phf_hash\" class=\"fn\">phf_hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds the value into the state given, updating the hasher as necessary.</div></details></div></details>","PhfHash","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FmtConst-for-str\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#145\">source</a><a href=\"#impl-FmtConst-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.FmtConst.html\" title=\"trait phf_shared::FmtConst\">FmtConst</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_const\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#145\">source</a><a href=\"#method.fmt_const\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.FmtConst.html#tymethod.fmt_const\" class=\"fn\">fmt_const</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"jumpy/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct jumpy::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Print a <code>const</code> expression representing this value.</div></details></div></details>","FmtConst","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseLiteral-for-str\" class=\"impl\"><a href=\"#impl-ParseLiteral-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ParseLiteral for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_string_literal\" class=\"method trait-impl\"><a href=\"#method.parse_string_literal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_string_literal</a>(&amp;self, pos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, literal: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; RuleResult&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Attempt to match the <code>literal</code> string at <code>pos</code>, returning whether it\nmatched or failed.</div></details></div></details>","ParseLiteral","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parse-for-str\" class=\"impl\"><a href=\"#impl-Parse-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Parse for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.PositionRepr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PositionRepr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PositionRepr</a> = LineCol</h4></section><section id=\"method.start\" class=\"method trait-impl\"><a href=\"#method.start\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.is_eof\" class=\"method trait-impl\"><a href=\"#method.is_eof\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_eof</a>(&amp;self, pos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.position_repr\" class=\"method trait-impl\"><a href=\"#method.position_repr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">position_repr</a>(&amp;self, pos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; LineCol</h4></section></div></details>","Parse","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseSlice%3C'input%3E-for-str\" class=\"impl\"><a href=\"#impl-ParseSlice%3C'input%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'input&gt; ParseSlice&lt;'input&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = &amp;'input <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Type of a slice of the input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_slice\" class=\"method trait-impl\"><a href=\"#method.parse_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_slice</a>(&amp;'input self, p1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, p2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; &amp;'input <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Get a slice of input.</div></details></div></details>","ParseSlice<'input>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseElem%3C'input%3E-for-str\" class=\"impl\"><a href=\"#impl-ParseElem%3C'input%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'input&gt; ParseElem&lt;'input&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Element</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a></h4></section></summary><div class='docblock'>Type of a single atomic element of the input, for example a character or token</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_elem\" class=\"method trait-impl\"><a href=\"#method.parse_elem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_elem</a>(&amp;'input self, pos: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; RuleResult&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class='docblock'>Get the element at <code>pos</code>, or <code>Failed</code> if past end of input.</div></details></div></details>","ParseElem<'input>","jumpy::ui::main_menu::credits::credits_parser::Input","jumpy::ui::main_menu::credits::credits_parser::PositionRepr"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()