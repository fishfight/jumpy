searchState.loadedDescShard("jumpy", 7, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the type into an <code>Option&lt;Region&gt;</code>.\nConverts the loaded sound into a live, playing sound and a …\nCalled whenever a new batch of audio samples is requested …\nReturns the destination that this sound’s audio should …\nProduces the next <code>Frame</code> of audio.\nThe starting time of the region (in seconds).\nPlayable chunks of audio that are loaded into memory all …\nDecodes data gradually from an audio file.\nA piece of audio loaded into memory all at once.\nControls a static sound.\nSettings for a static sound.\nSets the tween used to fade in the sound from silence.\nAn optional fade-in from silence.\nThe raw samples that make up the audio.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the portion of the sound that should be looped.\nThe portion of the sound that should be looped.\nCreates a new <code>StaticSoundSettings</code> with the default …\nSets the destination that this sound should be routed to.\nThe destination that this sound should be routed to.\nSets the panning of the sound, where 0 is hard left and 1 …\nThe panning of the sound, where 0 is hard left and 1 is …\nFades out the sound to silence with the given tween and …\nSets the playback rate of the sound.\nThe playback rate of the sound.\nReturns the current playback position of the sound (in …\nResumes playback and fades in the sound from silence with …\nResumes playback at the given start time and fades in the …\nSets whether the sound should be played in reverse.\nWhether the sound should be played in reverse.\nThe sample rate of the audio (in Hz).\nMoves the playback position by the specified amount of …\nSets the playback position to the specified time in …\nSets the portion of the sound that will play in a loop.\nSets the panning of the sound, where <code>0.0</code> is hard left, <code>0.5</code> …\nSets the playback rate of the sound.\nSets the volume of the sound.\nSettings for the sound.\nThe portion of the sound this <code>StaticSoundData</code> represents.\nSets where in the sound playback should start.\nWhere in the sound playback should start.\nSets when the sound should start playing.\nWhen the sound should start playing.\nReturns the current playback state of the sound.\nFades out the sound to silence with the given tween and …\nSets the volume of the sound.\nThe volume of the sound.\nDecodes chunks of audio.\nErrors that can occur when decoding audio.\nA streaming sound that is not playing yet.\nControls a streaming sound.\nSettings for a streaming sound.\nDecodes the next chunk of audio.\nReturns the duration of the audio.\nSets the tween used to fade in the instance from silence.\nSets the tween used to fade in the instance from silence.\nAn optional fade-in from silence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>StreamingSoundData</code> for a cursor wrapping audio …\nCreates a <code>StreamingSoundData</code> for a <code>Decoder</code>.\nCreates a <code>StreamingSoundData</code> for an audio file.\nCreates a <code>StreamingSoundData</code> for a type that implements …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the portion of the sound that should be looped.\nSets the portion of the sound that should be looped.\nThe portion of the sound that should be looped.\nCreates a new <code>StreamingSoundSettings</code> with the default …\nReturns the total number of samples of audio.\nReturns the number of frames in the <code>StreamingSoundData</code>.\nSets the destination that this sound should be routed to.\nSets the destination that this sound should be routed to.\nThe destination that this sound should be routed to.\nSets the panning of the sound, where 0 is hard left and 1 …\nSets the panning of the sound, where 0 is hard left and 1 …\nThe panning of the sound, where 0 is hard left and 1 is …\nFades out the sound to silence with the given tween and …\nSets the playback rate of the sound.\nSets the playback rate of the sound.\nThe playback rate of the sound.\nReturns an error that occurred while decoding audio, if …\nReturns the current playback position of the sound (in …\nResumes playback and fades in the sound from silence with …\nResumes playback at the given start time and fades in the …\nReturns the sample rate of the audio (in Hz).\nSeeks to an audio sample.\nMoves the playback position by the specified amount of …\nSets the playback position to the specified time in …\nSets the portion of the sound that will play in a loop.\nSets the panning of the sound, where <code>0.0</code> is hard left, <code>0.5</code> …\nSets the playback rate of the sound.\nSets the volume of the sound.\nSettings for the streaming sound.\nSets the portion of the audio this <code>StreamingSoundData</code> …\nThe portion of the sound this <code>StreamingSoundData</code> …\nSets where in the sound playback should start.\nSets where in the sound playback should start.\nWhere in the sound playback should start.\nSets when the sound should start playing.\nSets when the sound should start playing.\nWhen the sound should start playing.\nReturns the current playback state of the sound.\nFades out the sound to silence with the given tween and …\nSets the volume of the sound.\nSets the volume of the sound.\nThe volume of the sound.\nReturns the <code>StreamingSoundData</code> with the specified settings.\nProduces audio in a 3D space.\nReceives audio in a 3D space.\nA 3D space that audio travels through.\nThe distances from a listener at which an emitter is …\nControls a emitter.\nA unique identifier for an emitter.\nSettings for an emitter.\nSets how the emitter’s volume will change with distance.\nHow the emitter’s volume will change with distance.\nSets the distances from a listener at which the emitter is …\nThe distances from a listener at which the emitter is …\nSets whether the emitter’s output should be panned left …\nWhether the emitter’s output should be panned left or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier for the emitter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe distance from a listener at which an emitter becomes …\nThe distance from a listener at which an emitter outputs …\nCreates a new <code>EmitterSettings</code> with the default settings.\nSets whether the emitter should be kept alive until all …\nWhether the emitter should be kept alive until all sounds …\nReturns the ID of the spatial scene this emitter belongs …\nSets the position that audio is produced from.\nControls a listener.\nSettings for a listener.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ListenerSettings</code> with the default settings.\nSets the rotation of the listener.\nSets the location of the listener in the spatial scene.\nSets the mixer track that the listener’s received audio …\nThe mixer track that the listener’s received audio …\nControls a spatial scene.\nA unique identifier for a spatial scene.\nSettings for a spatial scene.\nAdds an emitter to the scene.\nAdds a listener to the scene.\nSets the maximum number of emitters that can be in the …\nThe maximum number of emitters that can be in the scene at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier for the spatial scene.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum number of listeners that can be in the …\nThe maximum number of listeners that can be in the scene …\nCreates a new <code>SpatialSceneSettings</code> with the default …\nReturns the number of emitters in the scene.\nReturns the number of listeners in the scene.\nThe main mixer track.\nAn error that’s returned when trying to change the …\nA sub-track.\nA unique identifier for a mixer sub-track.\nConfigures a mixer track.\nControls a mixer track.\nA unique identifier for a track.\nDefines how the output of a mixer sub-track will be fed …\nAdds an already built effect into this track.\nAdds an effect to the track.\nCreates a new <code>TrackRoutes</code> with no routes pre-configured.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier for the mixer track.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TrackBuilder</code> with the default settings.\nCreates a new <code>TrackRoutes</code> with the default settings.\nCreates a new <code>TrackRoutes</code> with a single route to the …\nSets how the output of this track should be routed to …\nSets the volume of this track’s route to another track.\nSets the (post-effects) volume of the mixer track.\nSets the volume of the track.\nAdd an already-built effect and return the <code>TrackBuilder</code>.\nAdds an effect to the track and returns the <code>TrackBuilder</code>.\nSets how much of the current track’s signal will be sent …\nRemoves the route to the specified track.\nCurves the motion of a <code>Tween</code>.\nA fixed value.\nThe value of a <code>modulator</code>.\nCauses the <code>Tween</code> to start slow, speed up, and then slow …\nCauses the <code>Tween</code> to start slow, speed up, and then slow …\nCauses the <code>Tween</code> to start slow and speed up. A higher …\nCauses the <code>Tween</code> to start slow and speed up. A higher …\nMaintains a constant speed for the duration of the <code>Tween</code>.\nA transformation from a modulator’s value to a parameter …\nCauses the <code>Tween</code> to start fast and slow down. A higher …\nCauses the <code>Tween</code> to start fast and slow down. A higher …\nManages and updates a value that can be smoothly …\nDescribes a smooth transition between values.\nA trait for types that can be smoothly interpolated.\nA value that a parameter can be linked to.\nWhether values should be prevented from being less than …\nWhether values should be prevented from being greater than …\nThe duration of the motion.\nThe curve of the motion.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Value::FromModulator</code> from a modulator ID or …\nA range of values from a modulator.\nReturns an linearly interpolated value between <code>a</code> and <code>b</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransforms an input value to an output value using this …\nCreates a new <code>Parameter</code> with an initial <code>Value</code>.\nThe corresponding range of values of the parameter.\nReads a <code>ValueChangeCommand</code> from a <code>CommandReader</code>, and if …\nStarts a transition from the current value to the target …\nWhen the motion starts.\nConverts a <code>Value&lt;T&gt;</code> to a <code>Value&lt;T2&gt;</code>.\nConverts a <code>ModulatorMapping&lt;T&gt;</code> to a <code>ModulatorMapping&lt;T2&gt;</code>.\nUpdates any in-progress transitions and keeps the value …\nReturns the current actual value of the parameter.\nThe modulator to link to.\nHow the modulator’s value should be converted to the …\nGame is starting\nJoin server\nThe type of the <code>LAN_MATCHMAKER</code> channel.\nA request that may be sent to the <code>LAN_MATCHMAKER</code>.\nA response that may come from the <code>LAN_MATCHMAKER</code>.\nServer player count\nService discover info and ping.\nServer started\nReceiver for LAN service discovery channel.\nStart matchmaker server\nStop joining match\nStop matchmaking server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin a server hosted by someone else.\nLeave a joined server.\nThe ping in milliseconds\nGet the current host info or create a new one. When there…\nUpdate server pings and turn on service discovery.\nmutli-cast dns service discover info.\nHost a server.\nStop hosting a server.\nWait for a joined game to start.\nWait for players to join a hosted server.\nNode Addr\nmatch player count\nGame player count\nLocal player index\nLan socket to game\nAn error message response\nA unique identifier for a game\nThe desired client count has been reached, and the match …\nA list of available lobbies\nConfirmation that a lobby has been created\nA unique identifier for a lobby\nInformation about a lobby\nConfirmation that a client has joined a lobby\nInformation about a lobby for the lobby list\nResponse that specifies updates about the current lobby …\nALPN used for the matchmaking protocol.\nInformation about a match that is being requested\nInternal struct used to keep track of the connection with …\nResponse that specifies updates about the current …\nOnline matchmaker channel\nStruct that holds a channel which exchange messages with …\nOnline matchmaker request\nOnline matchmaker response\nThe players will be assigned an idx based on the order …\nChoose how player_idx should be assigned to each player …\nThe number of bytes to use for read_to_end()\nThe players will randomly be assigned an idx\nSearching for matchmaking in progress\nThe order specified in the Vec will be assigned to the …\nAcquires the matchmaker connection, either establishing …\nCloses the connection with the matchmaker, and removes the …\nSends a request to the matchmaking server to create a new …\nThe current number of players in the lobby\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier for the game\nThe unique identifier for the game\nThe unique identifier for the game this lobby belongs to\nWhether the lobby is password protected\nThe unique identifier of the lobby\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a connection with the matchmaker currently …\nSends a request to the matchmaking server to join a lobby …\nSends a request to the matchmaking server to provide a …\nThis is an arbitrary set of bytes that must match exactly …\nThis is an arbitrary set of bytes that the lobby creator …\nThe maximum number of players to have in a match.\nThe maximum number of players allowed in the lobby\nThe maximum number of players allowed in the lobby\nThe name of the lobby\nThe name of the lobby\nInitialize a new MatchmakerConnectionState\nReturns the NodeId associated with the request.\nThe hashed password for the lobby, if any\nEnables choosing how player_idx should be assigned to each …\nEnables choosing how player_idx should be assigned to each …\nRead and return the latest matchmaker response, if one …\nSets the iroh NodeId that will be used to establish …\nSends a request to the matchmaking server to start …\nStops searching for a match.\nCall the given function with the arguments in the stack. …\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nA counter for tracking the amount of time spent in …\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nSequence pending, <code>Sequence::poll</code> will be called on the …\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nSequence finished, the values in the stack will be …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nYield the values in the stack inside a coroutine. If …\nAdd to or subtract from the current remaining fuel.\nSubtract from the current remaining fuel.\nCreate a new <code>Lua</code> instance with the core stdlib loaded.\nThe curently executing Thread.\nCreate a new <code>Lua</code> instance with no parts of the stdlib …\nEnter the garbage collection arena and perform some …\nCalled if a sub-function errors to handle the error, or if …\nRun the given executor to completion and then take return …\nThe curently running Executor.\nThis operation always returns a Number, even when called …\nCalls <code>ctx.registry().fetch(f)</code>.\n“Fetch” the real value for a handle that has been …\nRun the given executor to completion.\nThis operation always returns a Number, even when called …\nThis operation returns an Integer only if both arguments …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe fuel parameter passed to <code>Executor::step</code>.\nCreate a new <code>Lua</code> instance with all of the stdlib loaded.\nFinish the current collection cycle completely, calls …\nCalls <code>ctx.globals().get(ctx, key)</code>.\nCalls <code>ctx.interned_strings().intern(&amp;ctx, s)</code>.\nCalls <code>ctx.interned_strings().intern_static(&amp;ctx, s)</code>.\nMarks that the calling <code>Executor</code> should immediately stop …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the key-value pairs of the table.\nReturns a ‘border’ for this table.\nCompile a top-level closure from source, using the globals …\nLoad the core parts of the stdlib that do not allow …\nLoad the parts of the stdlib that allow I/O.\nCompile a top-level closure from source, using the given …\nComputes the Lua modulus (<code>%</code>) operator. This is unlike Rust…\nCreate a top-level closure, prototype must not have any …\nCreates a new <code>Executor</code> with a stopped main thread.\nReturns the next value after this key in the table order.\nCalled when a <code>Sequence</code> is first run with the stack …\nRefills fuel up to a given maximum and also clears the …\nReset this <code>Executor</code> entirely and begins running the given …\nIf this thread is in any other mode than <code>Running</code>, reset …\nReset this <code>Executor</code> entirely and begins running the given …\nIf the thread is in <code>Suspended</code> mode, resume it.\nIf the thread is in <code>Suspended</code> mode, cause an error …\nCreates a new <code>Executor</code> that begins running the given …\nCalls <code>ctx.globals().set(ctx, key, value)</code>.\nReturns true if we have positive fuel remaining <em>and</em> we …\nCalls <code>ctx.registry().singleton::&lt;S&gt;(ctx)</code>.\nCreate an instance of a type that exists at most once per …\nCreates a new <code>Executor</code> with a new <code>Thread</code> running the given …\nIf this thread is <code>Stopped</code>, start a new function with the …\nIf this thread is <code>Stopped</code>, start a new suspended function.\nCalls <code>ctx.registry().stash(ctx, s)</code>.\n“Stash” a value with a <code>&#39;gc</code> branding lifetime, creating …\nRuns the VM for a period of time controlled by the <code>fuel</code> …\nReset this <code>Executor</code> entirely, leaving it with a stopped …\nIf the thread is in the <code>Result</code> mode, take the returned (or …\nLua <code>nil</code> and <code>false</code> are false, anything else is true.\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as a Number, if …\nInterprets Numbers, Integers, and Strings as a Number, if …\nSize of all memory used by this Lua context.\nA version of <code>Lua::enter</code> that expects failure and also …\nIf the function we are returning to is Lua, returns …\nA <code>Gc</code> pointer to any type <code>T: Collect + &#39;gc</code> which allows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with the arguments in the stack. …\nSequence pending, <code>Sequence::poll</code> will be called on the …\nSequence finished, the values in the stack will be …\nYield the values in the stack inside a coroutine. If …\nCalled if a sub-function errors to handle the error, or if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalled when a <code>Sequence</code> is first run with the stack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps OpCodes to source code line numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumerals are only lexed as integers in the range […\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent line number of the source file.\nReads the next token, or None if the end of the source has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for a <code>Constant</code> that implements Hash and Eq, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA counter for tracking the amount of time spent in …\nReads a Lua script from a <code>R: Read</code> and wraps it in a …\nTakes an <code>R: BufRead</code> and:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with arguments placed after it, …\nConcatenate the given arguments into a string\nUsed to set up for a generic for loop:\nUsed to iterate a generic for loop:\nUsed for calling methods on tables: R(base + 1) = R(table) …\nUsed to iterate a numeric for loop:\nUsed to set up for a numeric for loop:\nSet elements of a table as a list.\nEffectively, call the given function with the arguments …\nTest the register as a boolean, if its boolean value …\nTest the value at the <code>value</code> register as a boolean, if its …\nPlaces the contents of the “varargs” at the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set of shared, immutable <code>String</code> values that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 16 bit index into the constant table\nAn 8 bit index into the constant table\nA one byte Option value that can either be Some(0-254) or …\nAn index into the prototype table\nAn index that points to a register in the stack relative …\nAn index into the upvalue table\nCount of arguments or return values which can either be a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA newtype around <code>Vec2</code> that implements <code>From&lt;u16&gt;</code> and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResource that produces deterministic pseudo-random …\nReturns the active locale for the system or application.\nReturns the preferred locales for the system or …\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nEnum representing available character direction …\nLeft To Right\n<code>LanguageIdentifier</code> is a core struct representing a Unicode …\nEnum with errors that can be returned by …\nA parser error.\nRight To Left\nTop To Bottom\nAn unknown error - currently covers all-but parser errors.\nThis is a best-effort operation that performs all …\nReturns character direction of the <code>LanguageIdentifier</code>.\nClears variant subtags of the <code>LanguageIdentifier</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA constructor which takes a utf8 slice, parses it and …\nA constructor which takes optional subtags as <code>AsRef&lt;[u8]&gt;</code>, …\nUnchecked\nTests if a variant subtag is present in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>LanguageIdentifier</code> and produces raw internal …\nCompares a <code>LanguageIdentifier</code> to another …\nSets variant subtags of the <code>LanguageIdentifier</code>.\nReturns a vector of variants subtags of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata describing a border image.\nA button rendered with a <code>BorderImageMeta</code>\nA 9-patch style bordered frame.\nThe border images to use for a <code>ButtonThemeMeta</code> when the …\nMetadata describing a themed button.\nA margin specification.\nThe size of the border on each side.\nThe border images to use for different button states.\nThe bottom margin.\nWhen the button is clicked on.\nThe default button state.\nWhen the button is hovered for focused on.\nThe font family, size, and color to use for the button.\nThe image for the border.\nThe size of the border image in pixels.\nThe left margin.\nThe amount of space to pad around the internal edges of …\nThe right margin.\nThe scale to render the border image at.\nThe top margin.\nReturns the argument unchanged.\nInstalls profiler ui plugins\nCalls <code>U::from(self)</code>.\nNotify profilers we are at frame boundary\nInstall the profiler UI to profiler session.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptionally provide map_pool to restart game with. If not …\nBinds inputs to player actions\nGlobal settings, stored and accessed through <code>Storage</code>.\nReturn an iterator for PlayerControlSetting for all …\nThe scaling factor for sound effects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to display the game fullscreen.\nSettings plugin\nControls for game remotes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls for keyboard player 1\nControls for keyboard player 2\nStartup system to load the game settings or use the …\nThe main scaling factor for all game audios. This is done …\nThe address of the matchmaking server to connect to for …\nThe scaling factor for music.\nThe player controller bindings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSystem for rendering player image in UI\nWhich page of the menu we are on\nshadow-rs mod\nReturns the argument unchanged.\nReturns the argument unchanged.\nSystem to render the home menu.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates the client is waiting for the map to be …\nThe name of the Git branch that this project was built …\nOperating system and architecture on which the project was …\nThe debug configuration with which the project was built. …\nThe target for this build. This is possibly distinct from …\nThe architecture of the target for this build. This is the …\nThe project build time, formatted in modified ISO 8601 …\nThe project build time, formatted according to RFC 2822 …\nThe project build time, formatted according to RFC 3339 …\nThe directory of the Cargo.toml manifest file of the …\nThe dependency tree of the project, as output by <code>cargo tree</code>…\nThe cargo version which which the project was built, as …\nA long version string describing the project. The version …\nThe author of the Git commit that this project was built …\nThe time of the Git commit that this project was built …\nThe name of the Git branch that this project was built …\nThe name of the Git branch that this project was built …\nThe e-mail address of the author of the Git commit that …\nThe full commit hash of the Git commit that this project …\nWhether the Git working tree was clean at the time of …\nThe Git working tree status as a list of files with their …\nThe name of the last Git tag on the branch that this …\nThe project’s description, as determined by the …\nThe project’s full version string, as determined by the …\nThe project’s semver major version, as determined by the …\nThe project’s semver minor version, as determined by the …\nThe project’s semver patch version, as determined by the …\nThe project’s semver pre-release version, as determined …\nThe project name, as determined by the Cargo.toml manifest.\nThe Rustup toolchain with which the project was built. …\nRust version with which the project was built. The version …\nThe short hash of the Git commit that this project was …\nThe name of the Git tag that this project was built from. …\nA long version string describing the project. The version …\nPrints all built-in <code>shadow-rs</code> build constants to standard …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNetwork message that may be sent when selecting a map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSend a MapSelectMessage over network if local player has …\nNetwork message that may be sent during player selection.\nThis is used instead of Empty for a required player slot …\nCache the hats and player assets in PlayerSelectState\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCache of available hats from the game and packs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache of available players from the game and packs.\nWhich settings tab we are on\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of input binding to listen for.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNetwork message that may be sent when selecting a map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSent request to matchmaker but have not yet received a …\nGame id for matchmaking\nHosting a lobby,\nJoining a lobby\nStarting match\nSearching with matchmaker\nStates for\nGot response from matchmaker but not enough players in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper for pausing session depending on if online or …\nThe width of each player panel\nIf Player won the match or is tied for win\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReset menu state")