name: CD

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:
  build_release:
    name: Build release binaries
    runs-on: ${{ matrix.config.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, target: 'x86_64-unknown-linux-gnu' }
          - { os: macos-latest, target: 'x86_64-apple-darwin' }
          - { os: macos-latest, target: 'aarch64-apple-darwin' }
          - { os: windows-latest, target: 'x86_64-pc-windows-msvc' }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.config.target }}

      - uses: actions/cache@v3
        name: Cache cargo registry
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-registry
      - uses: actions/cache@v3
        name: Cache cargo target
        with:
          path: |
            target/
            web-target/
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.config.target }}

      - name: Prepare artifacts [Windows]
        shell: bash
        if: matrix.config.os == 'windows-latest'
        run: |
          release_dir="jumpy-${{ env.RELEASE_VERSION }}"
          artifact_path="jumpy-${{ env.RELEASE_VERSION }}-${{ matrix.config.target }}.zip"
          echo "ARTIFACT_PATH=$artifact_path" >> $GITHUB_ENV
          mkdir $release_dir
          cp target/${{ matrix.config.target }}/release/jumpy.exe $release_dir/
          cp -R assets/ $release_dir/
          cp LICENSE $release_dir/
          7z a -tzip $artifact_path $release_dir/

      - name: Prepare artifacts [Unix]
        shell: bash
        if: matrix.config.os != 'windows-latest'
        run: |
          release_dir="jumpy-${{ env.RELEASE_VERSION }}"
          artifact_path="jumpy-${{ env.RELEASE_VERSION }}-${{ matrix.config.target }}.tar.gz"
          echo "ARTIFACT_PATH=$artifact_path" >> $GITHUB_ENV
          mkdir $release_dir
          cp target/${{ matrix.config.target }}/release/jumpy $release_dir/
          cp -R assets $release_dir
          cp LICENSE $release_dir
          tar -czvf $artifact_path $release_dir/

      - name: Deploy | Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

  publish_release:
    name: Create and Publish GitHub Release
    needs: build_release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Set stable release name
        shell: bash
        if: env.release_VERSION != 'main'
        run: echo "RELEASE_NAME=Jumpy ${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Set pre-release name
        shell: bash
        if: env.release_VERSION == 'main'
        run: echo "RELEASE_NAME=Jumpy Dev Snapshot" >> $GITHUB_ENV

      - name: Generate Checksums
        run: for file in jumpy-*/jumpy-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Publish Release
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: Release ${{ env.RELEASE_VERSION }}
          file: jumpy-*/jumpy-*
          file_glob: true
          overwrite: true
          prerelease: ${{ env.RELEASE_VERSION == 'main' }}
          body: '${{ env.RELEASE_NAME }}'
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}